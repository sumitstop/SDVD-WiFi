# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ieee802_11_swig', [dirname(__file__)])
        except ImportError:
            import _ieee802_11_swig
            return _ieee802_11_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_ieee802_11_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ieee802_11_swig = swig_import_helper()
    del swig_import_helper
else:
    import _ieee802_11_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _ieee802_11_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _ieee802_11_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _ieee802_11_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _ieee802_11_swig.high_res_timer_epoch()
class packet_header_default(object):
    """Proxy of C++ gr::digital::packet_header_default class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(gr::digital::packet_header_default self, long header_len, std::string const & len_tag_key="packet_len", std::string const & num_tag_key="packet_num", 
            int bits_per_byte=1) -> packet_header_default
        """
        this = _ieee802_11_swig.new_packet_header_default(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ieee802_11_swig.delete_packet_header_default
    __del__ = lambda self : None;
    def base(self):
        """base(packet_header_default self) -> gr::digital::packet_header_default::sptr"""
        return _ieee802_11_swig.packet_header_default_base(self)

    def formatter(self):
        """formatter(packet_header_default self) -> gr::digital::packet_header_default::sptr"""
        return _ieee802_11_swig.packet_header_default_formatter(self)

    def set_header_num(self, *args, **kwargs):
        """set_header_num(packet_header_default self, unsigned int header_num)"""
        return _ieee802_11_swig.packet_header_default_set_header_num(self, *args, **kwargs)

    def header_len(self):
        """header_len(packet_header_default self) -> long"""
        return _ieee802_11_swig.packet_header_default_header_len(self)

    def len_tag_key(self):
        """len_tag_key(packet_header_default self) -> swig_int_ptr"""
        return _ieee802_11_swig.packet_header_default_len_tag_key(self)

    def header_formatter(self, *args, **kwargs):
        """header_formatter(packet_header_default self, long packet_len, unsigned char * out, tags_vector_t tags=std::vector< gr::tag_t >()) -> bool"""
        return _ieee802_11_swig.packet_header_default_header_formatter(self, *args, **kwargs)

    def header_parser(self, *args, **kwargs):
        """header_parser(packet_header_default self, unsigned char const * header, tags_vector_t tags) -> bool"""
        return _ieee802_11_swig.packet_header_default_header_parser(self, *args, **kwargs)

    def make(*args, **kwargs):
        """
        make(long header_len, std::string const & len_tag_key="packet_len", std::string const & num_tag_key="packet_num", 
            int bits_per_byte=1) -> gr::digital::packet_header_default::sptr
        """
        return _ieee802_11_swig.packet_header_default_make(*args, **kwargs)

    make = staticmethod(make)
packet_header_default_swigregister = _ieee802_11_swig.packet_header_default_swigregister
packet_header_default_swigregister(packet_header_default)

def packet_header_default_make(*args, **kwargs):
  """
    packet_header_default_make(long header_len, std::string const & len_tag_key="packet_len", std::string const & num_tag_key="packet_num", 
        int bits_per_byte=1) -> gr::digital::packet_header_default::sptr
    """
  return _ieee802_11_swig.packet_header_default_make(*args, **kwargs)

class constellation(object):
    """Proxy of C++ gr::digital::constellation class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ieee802_11_swig.delete_constellation
    __del__ = lambda self : None;
    def map_to_points(self, *args, **kwargs):
        """map_to_points(constellation self, unsigned int value, gr_complex * points)"""
        return _ieee802_11_swig.constellation_map_to_points(self, *args, **kwargs)

    def map_to_points_v(self, *args, **kwargs):
        """map_to_points_v(constellation self, unsigned int value) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_map_to_points_v(self, *args, **kwargs)

    def decision_maker(self, *args, **kwargs):
        """decision_maker(constellation self, gr_complex const * sample) -> unsigned int"""
        return _ieee802_11_swig.constellation_decision_maker(self, *args, **kwargs)

    def decision_maker_v(self, *args, **kwargs):
        """decision_maker_v(constellation self, pmt_vector_cfloat sample) -> unsigned int"""
        return _ieee802_11_swig.constellation_decision_maker_v(self, *args, **kwargs)

    def decision_maker_pe(self, *args, **kwargs):
        """decision_maker_pe(constellation self, gr_complex const * sample, float * phase_error) -> unsigned int"""
        return _ieee802_11_swig.constellation_decision_maker_pe(self, *args, **kwargs)

    def calc_metric(self, *args, **kwargs):
        """calc_metric(constellation self, gr_complex const * sample, float * metric, gr::digital::trellis_metric_type_t type)"""
        return _ieee802_11_swig.constellation_calc_metric(self, *args, **kwargs)

    def calc_euclidean_metric(self, *args, **kwargs):
        """calc_euclidean_metric(constellation self, gr_complex const * sample, float * metric)"""
        return _ieee802_11_swig.constellation_calc_euclidean_metric(self, *args, **kwargs)

    def calc_hard_symbol_metric(self, *args, **kwargs):
        """calc_hard_symbol_metric(constellation self, gr_complex const * sample, float * metric)"""
        return _ieee802_11_swig.constellation_calc_hard_symbol_metric(self, *args, **kwargs)

    def points(self):
        """points(constellation self) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_points(self)

    def s_points(self):
        """s_points(constellation self) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_s_points(self)

    def v_points(self):
        """v_points(constellation self) -> gr_vector_vector_complexf"""
        return _ieee802_11_swig.constellation_v_points(self)

    def apply_pre_diff_code(self):
        """apply_pre_diff_code(constellation self) -> bool"""
        return _ieee802_11_swig.constellation_apply_pre_diff_code(self)

    def set_pre_diff_code(self, *args, **kwargs):
        """set_pre_diff_code(constellation self, bool a)"""
        return _ieee802_11_swig.constellation_set_pre_diff_code(self, *args, **kwargs)

    def pre_diff_code(self):
        """pre_diff_code(constellation self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.constellation_pre_diff_code(self)

    def rotational_symmetry(self):
        """rotational_symmetry(constellation self) -> unsigned int"""
        return _ieee802_11_swig.constellation_rotational_symmetry(self)

    def dimensionality(self):
        """dimensionality(constellation self) -> unsigned int"""
        return _ieee802_11_swig.constellation_dimensionality(self)

    def bits_per_symbol(self):
        """bits_per_symbol(constellation self) -> unsigned int"""
        return _ieee802_11_swig.constellation_bits_per_symbol(self)

    def arity(self):
        """arity(constellation self) -> unsigned int"""
        return _ieee802_11_swig.constellation_arity(self)

    def base(self):
        """base(constellation self) -> gr::digital::constellation_sptr"""
        return _ieee802_11_swig.constellation_base(self)

    def as_pmt(self):
        """as_pmt(constellation self) -> swig_int_ptr"""
        return _ieee802_11_swig.constellation_as_pmt(self)

    def gen_soft_dec_lut(self, *args, **kwargs):
        """gen_soft_dec_lut(constellation self, int precision, float npwr=1.0)"""
        return _ieee802_11_swig.constellation_gen_soft_dec_lut(self, *args, **kwargs)

    def calc_soft_dec(self, *args, **kwargs):
        """calc_soft_dec(constellation self, gr_complex sample, float npwr=1.0) -> pmt_vector_float"""
        return _ieee802_11_swig.constellation_calc_soft_dec(self, *args, **kwargs)

    def set_soft_dec_lut(self, *args, **kwargs):
        """
        set_soft_dec_lut(constellation self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const & soft_dec_lut, 
            int precision)
        """
        return _ieee802_11_swig.constellation_set_soft_dec_lut(self, *args, **kwargs)

    def has_soft_dec_lut(self):
        """has_soft_dec_lut(constellation self) -> bool"""
        return _ieee802_11_swig.constellation_has_soft_dec_lut(self)

    def soft_dec_lut(self):
        """soft_dec_lut(constellation self) -> std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > >"""
        return _ieee802_11_swig.constellation_soft_dec_lut(self)

    def soft_decision_maker(self, *args, **kwargs):
        """soft_decision_maker(constellation self, gr_complex sample) -> pmt_vector_float"""
        return _ieee802_11_swig.constellation_soft_decision_maker(self, *args, **kwargs)

constellation_swigregister = _ieee802_11_swig.constellation_swigregister
constellation_swigregister(constellation)

class constellation_calcdist(constellation):
    """Proxy of C++ gr::digital::constellation_calcdist class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, 
            unsigned int rotational_symmetry, unsigned int dimensionality) -> gr::digital::constellation_calcdist::sptr
        """
        return _ieee802_11_swig.constellation_calcdist_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_constellation_calcdist
    __del__ = lambda self : None;
constellation_calcdist_swigregister = _ieee802_11_swig.constellation_calcdist_swigregister
constellation_calcdist_swigregister(constellation_calcdist)

def constellation_calcdist_make(*args, **kwargs):
  """
    constellation_calcdist_make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, 
        unsigned int rotational_symmetry, unsigned int dimensionality) -> gr::digital::constellation_calcdist::sptr
    """
  return _ieee802_11_swig.constellation_calcdist_make(*args, **kwargs)

class constellation_sector(constellation):
    """Proxy of C++ gr::digital::constellation_sector class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ieee802_11_swig.delete_constellation_sector
    __del__ = lambda self : None;
constellation_sector_swigregister = _ieee802_11_swig.constellation_sector_swigregister
constellation_sector_swigregister(constellation_sector)

class constellation_rect(constellation_sector):
    """Proxy of C++ gr::digital::constellation_rect class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, 
            unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, 
            float width_real_sectors, float width_imag_sectors) -> gr::digital::constellation_rect::sptr
        """
        return _ieee802_11_swig.constellation_rect_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_constellation_rect
    __del__ = lambda self : None;
constellation_rect_swigregister = _ieee802_11_swig.constellation_rect_swigregister
constellation_rect_swigregister(constellation_rect)

def constellation_rect_make(*args, **kwargs):
  """
    constellation_rect_make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, 
        unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, 
        float width_real_sectors, float width_imag_sectors) -> gr::digital::constellation_rect::sptr
    """
  return _ieee802_11_swig.constellation_rect_make(*args, **kwargs)

class constellation_expl_rect(constellation_rect):
    """Proxy of C++ gr::digital::constellation_expl_rect class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat constellation, std::vector< int,std::allocator< int > > pre_diff_code, 
            unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, 
            float width_real_sectors, float width_imag_sectors, std::vector< unsigned int,std::allocator< unsigned int > > sector_values) -> gr::digital::constellation_expl_rect::sptr
        """
        return _ieee802_11_swig.constellation_expl_rect_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_constellation_expl_rect
    __del__ = lambda self : None;
constellation_expl_rect_swigregister = _ieee802_11_swig.constellation_expl_rect_swigregister
constellation_expl_rect_swigregister(constellation_expl_rect)

def constellation_expl_rect_make(*args, **kwargs):
  """
    constellation_expl_rect_make(pmt_vector_cfloat constellation, std::vector< int,std::allocator< int > > pre_diff_code, 
        unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, 
        float width_real_sectors, float width_imag_sectors, std::vector< unsigned int,std::allocator< unsigned int > > sector_values) -> gr::digital::constellation_expl_rect::sptr
    """
  return _ieee802_11_swig.constellation_expl_rect_make(*args, **kwargs)

class constellation_psk(constellation_sector):
    """Proxy of C++ gr::digital::constellation_psk class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, 
            unsigned int n_sectors) -> gr::digital::constellation_psk::sptr
        """
        return _ieee802_11_swig.constellation_psk_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_constellation_psk
    __del__ = lambda self : None;
constellation_psk_swigregister = _ieee802_11_swig.constellation_psk_swigregister
constellation_psk_swigregister(constellation_psk)

def constellation_psk_make(*args, **kwargs):
  """
    constellation_psk_make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, 
        unsigned int n_sectors) -> gr::digital::constellation_psk::sptr
    """
  return _ieee802_11_swig.constellation_psk_make(*args, **kwargs)

class constellation_dqpsk(constellation):
    """Proxy of C++ gr::digital::constellation_dqpsk class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> gr::digital::constellation_dqpsk::sptr"""
        return _ieee802_11_swig.constellation_dqpsk_make()

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_constellation_dqpsk
    __del__ = lambda self : None;
constellation_dqpsk_swigregister = _ieee802_11_swig.constellation_dqpsk_swigregister
constellation_dqpsk_swigregister(constellation_dqpsk)

def constellation_dqpsk_make():
  """constellation_dqpsk_make() -> gr::digital::constellation_dqpsk::sptr"""
  return _ieee802_11_swig.constellation_dqpsk_make()

class constellation_8psk(constellation):
    """Proxy of C++ gr::digital::constellation_8psk class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> gr::digital::constellation_8psk::sptr"""
        return _ieee802_11_swig.constellation_8psk_make()

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_constellation_8psk
    __del__ = lambda self : None;
constellation_8psk_swigregister = _ieee802_11_swig.constellation_8psk_swigregister
constellation_8psk_swigregister(constellation_8psk)

def constellation_8psk_make():
  """constellation_8psk_make() -> gr::digital::constellation_8psk::sptr"""
  return _ieee802_11_swig.constellation_8psk_make()

class constellation_8psk_natural(constellation):
    """Proxy of C++ gr::digital::constellation_8psk_natural class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> gr::digital::constellation_8psk_natural::sptr"""
        return _ieee802_11_swig.constellation_8psk_natural_make()

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_constellation_8psk_natural
    __del__ = lambda self : None;
constellation_8psk_natural_swigregister = _ieee802_11_swig.constellation_8psk_natural_swigregister
constellation_8psk_natural_swigregister(constellation_8psk_natural)

def constellation_8psk_natural_make():
  """constellation_8psk_natural_make() -> gr::digital::constellation_8psk_natural::sptr"""
  return _ieee802_11_swig.constellation_8psk_natural_make()

class chunks_to_symbols(object):
    """Proxy of C++ gr::ieee802_11::chunks_to_symbols class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> chunks_to_symbols_sptr"""
        return _ieee802_11_swig.chunks_to_symbols_make()

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_chunks_to_symbols
    __del__ = lambda self : None;
chunks_to_symbols_swigregister = _ieee802_11_swig.chunks_to_symbols_swigregister
chunks_to_symbols_swigregister(chunks_to_symbols)

def chunks_to_symbols_make():
  """chunks_to_symbols_make() -> chunks_to_symbols_sptr"""
  return _ieee802_11_swig.chunks_to_symbols_make()

class constellation_bpsk(constellation):
    """Proxy of C++ gr::ieee802_11::constellation_bpsk class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make():
        """make() -> constellation_bpsk_sptr"""
        return _ieee802_11_swig.constellation_bpsk_make()

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_constellation_bpsk
    __del__ = lambda self : None;
constellation_bpsk_swigregister = _ieee802_11_swig.constellation_bpsk_swigregister
constellation_bpsk_swigregister(constellation_bpsk)

def constellation_bpsk_make():
  """constellation_bpsk_make() -> constellation_bpsk_sptr"""
  return _ieee802_11_swig.constellation_bpsk_make()

class constellation_qpsk(constellation):
    """Proxy of C++ gr::ieee802_11::constellation_qpsk class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make():
        """make() -> constellation_qpsk_sptr"""
        return _ieee802_11_swig.constellation_qpsk_make()

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_constellation_qpsk
    __del__ = lambda self : None;
constellation_qpsk_swigregister = _ieee802_11_swig.constellation_qpsk_swigregister
constellation_qpsk_swigregister(constellation_qpsk)

def constellation_qpsk_make():
  """constellation_qpsk_make() -> constellation_qpsk_sptr"""
  return _ieee802_11_swig.constellation_qpsk_make()

class constellation_16qam(constellation):
    """Proxy of C++ gr::ieee802_11::constellation_16qam class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make():
        """make() -> constellation_16qam_sptr"""
        return _ieee802_11_swig.constellation_16qam_make()

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_constellation_16qam
    __del__ = lambda self : None;
constellation_16qam_swigregister = _ieee802_11_swig.constellation_16qam_swigregister
constellation_16qam_swigregister(constellation_16qam)

def constellation_16qam_make():
  """constellation_16qam_make() -> constellation_16qam_sptr"""
  return _ieee802_11_swig.constellation_16qam_make()

class constellation_64qam(constellation):
    """Proxy of C++ gr::ieee802_11::constellation_64qam class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make():
        """make() -> constellation_64qam_sptr"""
        return _ieee802_11_swig.constellation_64qam_make()

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_constellation_64qam
    __del__ = lambda self : None;
constellation_64qam_swigregister = _ieee802_11_swig.constellation_64qam_swigregister
constellation_64qam_swigregister(constellation_64qam)

def constellation_64qam_make():
  """constellation_64qam_make() -> constellation_64qam_sptr"""
  return _ieee802_11_swig.constellation_64qam_make()

class decode_mac(object):
    """Proxy of C++ gr::ieee802_11::decode_mac class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(log=False, debug=False):
        """make(bool log=False, bool debug=False) -> decode_mac_sptr"""
        return _ieee802_11_swig.decode_mac_make(log, debug)

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_decode_mac
    __del__ = lambda self : None;
decode_mac_swigregister = _ieee802_11_swig.decode_mac_swigregister
decode_mac_swigregister(decode_mac)

def decode_mac_make(log=False, debug=False):
  """decode_mac_make(bool log=False, bool debug=False) -> decode_mac_sptr"""
  return _ieee802_11_swig.decode_mac_make(log, debug)

class decode_mac_soft(object):
    """Proxy of C++ gr::ieee802_11::decode_mac_soft class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(log=False, debug=False):
        """make(bool log=False, bool debug=False) -> decode_mac_soft_sptr"""
        return _ieee802_11_swig.decode_mac_soft_make(log, debug)

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_decode_mac_soft
    __del__ = lambda self : None;
decode_mac_soft_swigregister = _ieee802_11_swig.decode_mac_soft_swigregister
decode_mac_soft_swigregister(decode_mac_soft)

def decode_mac_soft_make(log=False, debug=False):
  """decode_mac_soft_make(bool log=False, bool debug=False) -> decode_mac_soft_sptr"""
  return _ieee802_11_swig.decode_mac_soft_make(log, debug)

class ether_encap(object):
    """Proxy of C++ gr::ieee802_11::ether_encap class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(bool debug) -> ether_encap_sptr"""
        return _ieee802_11_swig.ether_encap_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_ether_encap
    __del__ = lambda self : None;
ether_encap_swigregister = _ieee802_11_swig.ether_encap_swigregister
ether_encap_swigregister(ether_encap)

def ether_encap_make(*args, **kwargs):
  """ether_encap_make(bool debug) -> ether_encap_sptr"""
  return _ieee802_11_swig.ether_encap_make(*args, **kwargs)

LS = _ieee802_11_swig.LS
LMS = _ieee802_11_swig.LMS
COMB = _ieee802_11_swig.COMB
STA = _ieee802_11_swig.STA
class frame_equalizer(object):
    """Proxy of C++ gr::ieee802_11::frame_equalizer class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(Equalizer algo, double freq, double bw, bool log, bool debug) -> frame_equalizer_sptr"""
        return _ieee802_11_swig.frame_equalizer_make(*args, **kwargs)

    make = staticmethod(make)
    def set_algorithm(self, *args, **kwargs):
        """set_algorithm(frame_equalizer self, Equalizer algo)"""
        return _ieee802_11_swig.frame_equalizer_set_algorithm(self, *args, **kwargs)

    def set_bandwidth(self, *args, **kwargs):
        """set_bandwidth(frame_equalizer self, double bw)"""
        return _ieee802_11_swig.frame_equalizer_set_bandwidth(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(frame_equalizer self, double freq)"""
        return _ieee802_11_swig.frame_equalizer_set_frequency(self, *args, **kwargs)

    __swig_destroy__ = _ieee802_11_swig.delete_frame_equalizer
    __del__ = lambda self : None;
frame_equalizer_swigregister = _ieee802_11_swig.frame_equalizer_swigregister
frame_equalizer_swigregister(frame_equalizer)

def frame_equalizer_make(*args, **kwargs):
  """frame_equalizer_make(Equalizer algo, double freq, double bw, bool log, bool debug) -> frame_equalizer_sptr"""
  return _ieee802_11_swig.frame_equalizer_make(*args, **kwargs)

LS_s = _ieee802_11_swig.LS_s
LMS_s = _ieee802_11_swig.LMS_s
COMB_s = _ieee802_11_swig.COMB_s
STA_s = _ieee802_11_swig.STA_s
class soft_frame_equalizer(object):
    """Proxy of C++ gr::ieee802_11::soft_frame_equalizer class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(Equalizer_soft algo, double freq, double bw, bool log, bool debug) -> soft_frame_equalizer_sptr"""
        return _ieee802_11_swig.soft_frame_equalizer_make(*args, **kwargs)

    make = staticmethod(make)
    def set_algorithm(self, *args, **kwargs):
        """set_algorithm(soft_frame_equalizer self, Equalizer_soft algo)"""
        return _ieee802_11_swig.soft_frame_equalizer_set_algorithm(self, *args, **kwargs)

    def set_bandwidth(self, *args, **kwargs):
        """set_bandwidth(soft_frame_equalizer self, double bw)"""
        return _ieee802_11_swig.soft_frame_equalizer_set_bandwidth(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(soft_frame_equalizer self, double freq)"""
        return _ieee802_11_swig.soft_frame_equalizer_set_frequency(self, *args, **kwargs)

    __swig_destroy__ = _ieee802_11_swig.delete_soft_frame_equalizer
    __del__ = lambda self : None;
soft_frame_equalizer_swigregister = _ieee802_11_swig.soft_frame_equalizer_swigregister
soft_frame_equalizer_swigregister(soft_frame_equalizer)

def soft_frame_equalizer_make(*args, **kwargs):
  """soft_frame_equalizer_make(Equalizer_soft algo, double freq, double bw, bool log, bool debug) -> soft_frame_equalizer_sptr"""
  return _ieee802_11_swig.soft_frame_equalizer_make(*args, **kwargs)

class mac(object):
    """Proxy of C++ gr::ieee802_11::mac class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::vector< uint8_t,std::allocator< uint8_t > > src_mac, std::vector< uint8_t,std::allocator< uint8_t > > dst_mac, 
            std::vector< uint8_t,std::allocator< uint8_t > > bss_mac) -> mac_sptr
        """
        return _ieee802_11_swig.mac_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_mac
    __del__ = lambda self : None;
mac_swigregister = _ieee802_11_swig.mac_swigregister
mac_swigregister(mac)

def mac_make(*args, **kwargs):
  """
    mac_make(std::vector< uint8_t,std::allocator< uint8_t > > src_mac, std::vector< uint8_t,std::allocator< uint8_t > > dst_mac, 
        std::vector< uint8_t,std::allocator< uint8_t > > bss_mac) -> mac_sptr
    """
  return _ieee802_11_swig.mac_make(*args, **kwargs)

BPSK_1_2 = _ieee802_11_swig.BPSK_1_2
BPSK_3_4 = _ieee802_11_swig.BPSK_3_4
QPSK_1_2 = _ieee802_11_swig.QPSK_1_2
QPSK_3_4 = _ieee802_11_swig.QPSK_3_4
QAM16_1_2 = _ieee802_11_swig.QAM16_1_2
QAM16_3_4 = _ieee802_11_swig.QAM16_3_4
QAM64_2_3 = _ieee802_11_swig.QAM64_2_3
QAM64_3_4 = _ieee802_11_swig.QAM64_3_4
class mapper(object):
    """Proxy of C++ gr::ieee802_11::mapper class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(Encoding mcs, bool debug=False) -> mapper_sptr"""
        return _ieee802_11_swig.mapper_make(*args, **kwargs)

    make = staticmethod(make)
    def set_encoding(self, *args, **kwargs):
        """set_encoding(mapper self, Encoding mcs)"""
        return _ieee802_11_swig.mapper_set_encoding(self, *args, **kwargs)

    __swig_destroy__ = _ieee802_11_swig.delete_mapper
    __del__ = lambda self : None;
mapper_swigregister = _ieee802_11_swig.mapper_swigregister
mapper_swigregister(mapper)

def mapper_make(*args, **kwargs):
  """mapper_make(Encoding mcs, bool debug=False) -> mapper_sptr"""
  return _ieee802_11_swig.mapper_make(*args, **kwargs)

class moving_average_cc(object):
    """Proxy of C++ gr::ieee802_11::moving_average_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int length) -> moving_average_cc_sptr"""
        return _ieee802_11_swig.moving_average_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def length(self):
        """length(moving_average_cc self) -> int"""
        return _ieee802_11_swig.moving_average_cc_length(self)

    def set_length(self, *args, **kwargs):
        """set_length(moving_average_cc self, int length)"""
        return _ieee802_11_swig.moving_average_cc_set_length(self, *args, **kwargs)

    __swig_destroy__ = _ieee802_11_swig.delete_moving_average_cc
    __del__ = lambda self : None;
moving_average_cc_swigregister = _ieee802_11_swig.moving_average_cc_swigregister
moving_average_cc_swigregister(moving_average_cc)

def moving_average_cc_make(*args, **kwargs):
  """moving_average_cc_make(int length) -> moving_average_cc_sptr"""
  return _ieee802_11_swig.moving_average_cc_make(*args, **kwargs)

class moving_average_ff(object):
    """Proxy of C++ gr::ieee802_11::moving_average_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int length) -> moving_average_ff_sptr"""
        return _ieee802_11_swig.moving_average_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def length(self):
        """length(moving_average_ff self) -> int"""
        return _ieee802_11_swig.moving_average_ff_length(self)

    def set_length(self, *args, **kwargs):
        """set_length(moving_average_ff self, int length)"""
        return _ieee802_11_swig.moving_average_ff_set_length(self, *args, **kwargs)

    __swig_destroy__ = _ieee802_11_swig.delete_moving_average_ff
    __del__ = lambda self : None;
moving_average_ff_swigregister = _ieee802_11_swig.moving_average_ff_swigregister
moving_average_ff_swigregister(moving_average_ff)

def moving_average_ff_make(*args, **kwargs):
  """moving_average_ff_make(int length) -> moving_average_ff_sptr"""
  return _ieee802_11_swig.moving_average_ff_make(*args, **kwargs)

class parse_mac(object):
    """Proxy of C++ gr::ieee802_11::parse_mac class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(log=False, debug=False):
        """make(bool log=False, bool debug=False) -> parse_mac_sptr"""
        return _ieee802_11_swig.parse_mac_make(log, debug)

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_parse_mac
    __del__ = lambda self : None;
parse_mac_swigregister = _ieee802_11_swig.parse_mac_swigregister
parse_mac_swigregister(parse_mac)

def parse_mac_make(log=False, debug=False):
  """parse_mac_make(bool log=False, bool debug=False) -> parse_mac_sptr"""
  return _ieee802_11_swig.parse_mac_make(log, debug)

class signal_field(packet_header_default):
    """Proxy of C++ gr::ieee802_11::signal_field class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> signal_field_sptr"""
        return _ieee802_11_swig.signal_field_make()

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_signal_field
    __del__ = lambda self : None;
signal_field_swigregister = _ieee802_11_swig.signal_field_swigregister
signal_field_swigregister(signal_field)

def signal_field_make():
  """signal_field_make() -> signal_field_sptr"""
  return _ieee802_11_swig.signal_field_make()

class sync_long(object):
    """Proxy of C++ gr::ieee802_11::sync_long class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int sync_length, bool log=False, bool debug=False) -> sync_long_sptr"""
        return _ieee802_11_swig.sync_long_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_sync_long
    __del__ = lambda self : None;
sync_long_swigregister = _ieee802_11_swig.sync_long_swigregister
sync_long_swigregister(sync_long)

def sync_long_make(*args, **kwargs):
  """sync_long_make(unsigned int sync_length, bool log=False, bool debug=False) -> sync_long_sptr"""
  return _ieee802_11_swig.sync_long_make(*args, **kwargs)

class sync_short(object):
    """Proxy of C++ gr::ieee802_11::sync_short class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(double threshold, unsigned int min_plateau, bool log=False, bool debug=False) -> sync_short_sptr"""
        return _ieee802_11_swig.sync_short_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ieee802_11_swig.delete_sync_short
    __del__ = lambda self : None;
sync_short_swigregister = _ieee802_11_swig.sync_short_swigregister
sync_short_swigregister(sync_short)

def sync_short_make(*args, **kwargs):
  """sync_short_make(double threshold, unsigned int min_plateau, bool log=False, bool debug=False) -> sync_short_sptr"""
  return _ieee802_11_swig.sync_short_make(*args, **kwargs)

class chunks_to_symbols_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::chunks_to_symbols)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::chunks_to_symbols)> self) -> chunks_to_symbols_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::chunks_to_symbols)> self, chunks_to_symbols p) -> chunks_to_symbols_sptr
        """
        this = _ieee802_11_swig.new_chunks_to_symbols_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(chunks_to_symbols_sptr self) -> chunks_to_symbols"""
        return _ieee802_11_swig.chunks_to_symbols_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_chunks_to_symbols_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(chunks_to_symbols_sptr self) -> chunks_to_symbols_sptr"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_make(self)

    def history(self):
        """history(chunks_to_symbols_sptr self) -> unsigned int"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(chunks_to_symbols_sptr self, int which, int delay)
        declare_sample_delay(chunks_to_symbols_sptr self, unsigned int delay)
        """
        return _ieee802_11_swig.chunks_to_symbols_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(chunks_to_symbols_sptr self, int which) -> unsigned int"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(chunks_to_symbols_sptr self) -> int"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(chunks_to_symbols_sptr self) -> double"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_relative_rate(self)

    def start(self):
        """start(chunks_to_symbols_sptr self) -> bool"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_start(self)

    def stop(self):
        """stop(chunks_to_symbols_sptr self) -> bool"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(chunks_to_symbols_sptr self, unsigned int which_input) -> uint64_t"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(chunks_to_symbols_sptr self, unsigned int which_output) -> uint64_t"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(chunks_to_symbols_sptr self) -> int"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(chunks_to_symbols_sptr self, int m)"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(chunks_to_symbols_sptr self)"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(chunks_to_symbols_sptr self) -> bool"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(chunks_to_symbols_sptr self, int m)"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(chunks_to_symbols_sptr self) -> int"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(chunks_to_symbols_sptr self, int i) -> long"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(chunks_to_symbols_sptr self, long max_output_buffer)
        set_max_output_buffer(chunks_to_symbols_sptr self, int port, long max_output_buffer)
        """
        return _ieee802_11_swig.chunks_to_symbols_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(chunks_to_symbols_sptr self, int i) -> long"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(chunks_to_symbols_sptr self, long min_output_buffer)
        set_min_output_buffer(chunks_to_symbols_sptr self, int port, long min_output_buffer)
        """
        return _ieee802_11_swig.chunks_to_symbols_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(chunks_to_symbols_sptr self) -> float"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(chunks_to_symbols_sptr self) -> float"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(chunks_to_symbols_sptr self) -> float"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(chunks_to_symbols_sptr self) -> float"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(chunks_to_symbols_sptr self) -> float"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(chunks_to_symbols_sptr self) -> float"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(chunks_to_symbols_sptr self, int which) -> float
        pc_input_buffers_full(chunks_to_symbols_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(chunks_to_symbols_sptr self, int which) -> float
        pc_input_buffers_full_avg(chunks_to_symbols_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(chunks_to_symbols_sptr self, int which) -> float
        pc_input_buffers_full_var(chunks_to_symbols_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(chunks_to_symbols_sptr self, int which) -> float
        pc_output_buffers_full(chunks_to_symbols_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(chunks_to_symbols_sptr self, int which) -> float
        pc_output_buffers_full_avg(chunks_to_symbols_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(chunks_to_symbols_sptr self, int which) -> float
        pc_output_buffers_full_var(chunks_to_symbols_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(chunks_to_symbols_sptr self) -> float"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(chunks_to_symbols_sptr self) -> float"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(chunks_to_symbols_sptr self) -> float"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(chunks_to_symbols_sptr self) -> float"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(chunks_to_symbols_sptr self) -> float"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(chunks_to_symbols_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(chunks_to_symbols_sptr self)"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(chunks_to_symbols_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(chunks_to_symbols_sptr self) -> int"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(chunks_to_symbols_sptr self) -> int"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(chunks_to_symbols_sptr self, int priority) -> int"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(chunks_to_symbols_sptr self) -> std::string"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_name(self)

    def symbol_name(self):
        """symbol_name(chunks_to_symbols_sptr self) -> std::string"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(chunks_to_symbols_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(chunks_to_symbols_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(chunks_to_symbols_sptr self) -> long"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(chunks_to_symbols_sptr self) -> basic_block_sptr"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(chunks_to_symbols_sptr self, int ninputs, int noutputs) -> bool"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(chunks_to_symbols_sptr self) -> std::string"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(chunks_to_symbols_sptr self, std::string name)"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(chunks_to_symbols_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ieee802_11_swig.chunks_to_symbols_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(chunks_to_symbols_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(chunks_to_symbols_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(chunks_to_symbols_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ieee802_11_swig.chunks_to_symbols_sptr_message_subscribers(self, *args, **kwargs)

chunks_to_symbols_sptr_swigregister = _ieee802_11_swig.chunks_to_symbols_sptr_swigregister
chunks_to_symbols_sptr_swigregister(chunks_to_symbols_sptr)

chunks_to_symbols_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
chunks_to_symbols = chunks_to_symbols.make;

class decode_mac_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::decode_mac)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::decode_mac)> self) -> decode_mac_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::decode_mac)> self, decode_mac p) -> decode_mac_sptr
        """
        this = _ieee802_11_swig.new_decode_mac_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(decode_mac_sptr self) -> decode_mac"""
        return _ieee802_11_swig.decode_mac_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_decode_mac_sptr
    __del__ = lambda self : None;
    def make(self, log=False, debug=False):
        """make(decode_mac_sptr self, bool log=False, bool debug=False) -> decode_mac_sptr"""
        return _ieee802_11_swig.decode_mac_sptr_make(self, log, debug)

    def history(self):
        """history(decode_mac_sptr self) -> unsigned int"""
        return _ieee802_11_swig.decode_mac_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(decode_mac_sptr self, int which, int delay)
        declare_sample_delay(decode_mac_sptr self, unsigned int delay)
        """
        return _ieee802_11_swig.decode_mac_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(decode_mac_sptr self, int which) -> unsigned int"""
        return _ieee802_11_swig.decode_mac_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(decode_mac_sptr self) -> int"""
        return _ieee802_11_swig.decode_mac_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(decode_mac_sptr self) -> double"""
        return _ieee802_11_swig.decode_mac_sptr_relative_rate(self)

    def start(self):
        """start(decode_mac_sptr self) -> bool"""
        return _ieee802_11_swig.decode_mac_sptr_start(self)

    def stop(self):
        """stop(decode_mac_sptr self) -> bool"""
        return _ieee802_11_swig.decode_mac_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(decode_mac_sptr self, unsigned int which_input) -> uint64_t"""
        return _ieee802_11_swig.decode_mac_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(decode_mac_sptr self, unsigned int which_output) -> uint64_t"""
        return _ieee802_11_swig.decode_mac_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(decode_mac_sptr self) -> int"""
        return _ieee802_11_swig.decode_mac_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(decode_mac_sptr self, int m)"""
        return _ieee802_11_swig.decode_mac_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(decode_mac_sptr self)"""
        return _ieee802_11_swig.decode_mac_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(decode_mac_sptr self) -> bool"""
        return _ieee802_11_swig.decode_mac_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(decode_mac_sptr self, int m)"""
        return _ieee802_11_swig.decode_mac_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(decode_mac_sptr self) -> int"""
        return _ieee802_11_swig.decode_mac_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(decode_mac_sptr self, int i) -> long"""
        return _ieee802_11_swig.decode_mac_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(decode_mac_sptr self, long max_output_buffer)
        set_max_output_buffer(decode_mac_sptr self, int port, long max_output_buffer)
        """
        return _ieee802_11_swig.decode_mac_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(decode_mac_sptr self, int i) -> long"""
        return _ieee802_11_swig.decode_mac_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(decode_mac_sptr self, long min_output_buffer)
        set_min_output_buffer(decode_mac_sptr self, int port, long min_output_buffer)
        """
        return _ieee802_11_swig.decode_mac_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(decode_mac_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(decode_mac_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(decode_mac_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(decode_mac_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(decode_mac_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(decode_mac_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(decode_mac_sptr self, int which) -> float
        pc_input_buffers_full(decode_mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.decode_mac_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(decode_mac_sptr self, int which) -> float
        pc_input_buffers_full_avg(decode_mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.decode_mac_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(decode_mac_sptr self, int which) -> float
        pc_input_buffers_full_var(decode_mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.decode_mac_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(decode_mac_sptr self, int which) -> float
        pc_output_buffers_full(decode_mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.decode_mac_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(decode_mac_sptr self, int which) -> float
        pc_output_buffers_full_avg(decode_mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.decode_mac_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(decode_mac_sptr self, int which) -> float
        pc_output_buffers_full_var(decode_mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.decode_mac_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(decode_mac_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(decode_mac_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(decode_mac_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(decode_mac_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(decode_mac_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(decode_mac_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ieee802_11_swig.decode_mac_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(decode_mac_sptr self)"""
        return _ieee802_11_swig.decode_mac_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(decode_mac_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.decode_mac_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(decode_mac_sptr self) -> int"""
        return _ieee802_11_swig.decode_mac_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(decode_mac_sptr self) -> int"""
        return _ieee802_11_swig.decode_mac_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(decode_mac_sptr self, int priority) -> int"""
        return _ieee802_11_swig.decode_mac_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(decode_mac_sptr self) -> std::string"""
        return _ieee802_11_swig.decode_mac_sptr_name(self)

    def symbol_name(self):
        """symbol_name(decode_mac_sptr self) -> std::string"""
        return _ieee802_11_swig.decode_mac_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(decode_mac_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.decode_mac_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(decode_mac_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.decode_mac_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(decode_mac_sptr self) -> long"""
        return _ieee802_11_swig.decode_mac_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(decode_mac_sptr self) -> basic_block_sptr"""
        return _ieee802_11_swig.decode_mac_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(decode_mac_sptr self, int ninputs, int noutputs) -> bool"""
        return _ieee802_11_swig.decode_mac_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(decode_mac_sptr self) -> std::string"""
        return _ieee802_11_swig.decode_mac_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(decode_mac_sptr self, std::string name)"""
        return _ieee802_11_swig.decode_mac_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(decode_mac_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ieee802_11_swig.decode_mac_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(decode_mac_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.decode_mac_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(decode_mac_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.decode_mac_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(decode_mac_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ieee802_11_swig.decode_mac_sptr_message_subscribers(self, *args, **kwargs)

decode_mac_sptr_swigregister = _ieee802_11_swig.decode_mac_sptr_swigregister
decode_mac_sptr_swigregister(decode_mac_sptr)

decode_mac_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
decode_mac = decode_mac.make;

class decode_mac_soft_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::decode_mac_soft)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::decode_mac_soft)> self) -> decode_mac_soft_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::decode_mac_soft)> self, decode_mac_soft p) -> decode_mac_soft_sptr
        """
        this = _ieee802_11_swig.new_decode_mac_soft_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(decode_mac_soft_sptr self) -> decode_mac_soft"""
        return _ieee802_11_swig.decode_mac_soft_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_decode_mac_soft_sptr
    __del__ = lambda self : None;
    def make(self, log=False, debug=False):
        """make(decode_mac_soft_sptr self, bool log=False, bool debug=False) -> decode_mac_soft_sptr"""
        return _ieee802_11_swig.decode_mac_soft_sptr_make(self, log, debug)

    def history(self):
        """history(decode_mac_soft_sptr self) -> unsigned int"""
        return _ieee802_11_swig.decode_mac_soft_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(decode_mac_soft_sptr self, int which, int delay)
        declare_sample_delay(decode_mac_soft_sptr self, unsigned int delay)
        """
        return _ieee802_11_swig.decode_mac_soft_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(decode_mac_soft_sptr self, int which) -> unsigned int"""
        return _ieee802_11_swig.decode_mac_soft_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(decode_mac_soft_sptr self) -> int"""
        return _ieee802_11_swig.decode_mac_soft_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(decode_mac_soft_sptr self) -> double"""
        return _ieee802_11_swig.decode_mac_soft_sptr_relative_rate(self)

    def start(self):
        """start(decode_mac_soft_sptr self) -> bool"""
        return _ieee802_11_swig.decode_mac_soft_sptr_start(self)

    def stop(self):
        """stop(decode_mac_soft_sptr self) -> bool"""
        return _ieee802_11_swig.decode_mac_soft_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(decode_mac_soft_sptr self, unsigned int which_input) -> uint64_t"""
        return _ieee802_11_swig.decode_mac_soft_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(decode_mac_soft_sptr self, unsigned int which_output) -> uint64_t"""
        return _ieee802_11_swig.decode_mac_soft_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(decode_mac_soft_sptr self) -> int"""
        return _ieee802_11_swig.decode_mac_soft_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(decode_mac_soft_sptr self, int m)"""
        return _ieee802_11_swig.decode_mac_soft_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(decode_mac_soft_sptr self)"""
        return _ieee802_11_swig.decode_mac_soft_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(decode_mac_soft_sptr self) -> bool"""
        return _ieee802_11_swig.decode_mac_soft_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(decode_mac_soft_sptr self, int m)"""
        return _ieee802_11_swig.decode_mac_soft_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(decode_mac_soft_sptr self) -> int"""
        return _ieee802_11_swig.decode_mac_soft_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(decode_mac_soft_sptr self, int i) -> long"""
        return _ieee802_11_swig.decode_mac_soft_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(decode_mac_soft_sptr self, long max_output_buffer)
        set_max_output_buffer(decode_mac_soft_sptr self, int port, long max_output_buffer)
        """
        return _ieee802_11_swig.decode_mac_soft_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(decode_mac_soft_sptr self, int i) -> long"""
        return _ieee802_11_swig.decode_mac_soft_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(decode_mac_soft_sptr self, long min_output_buffer)
        set_min_output_buffer(decode_mac_soft_sptr self, int port, long min_output_buffer)
        """
        return _ieee802_11_swig.decode_mac_soft_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(decode_mac_soft_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(decode_mac_soft_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(decode_mac_soft_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(decode_mac_soft_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(decode_mac_soft_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(decode_mac_soft_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(decode_mac_soft_sptr self, int which) -> float
        pc_input_buffers_full(decode_mac_soft_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(decode_mac_soft_sptr self, int which) -> float
        pc_input_buffers_full_avg(decode_mac_soft_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(decode_mac_soft_sptr self, int which) -> float
        pc_input_buffers_full_var(decode_mac_soft_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(decode_mac_soft_sptr self, int which) -> float
        pc_output_buffers_full(decode_mac_soft_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(decode_mac_soft_sptr self, int which) -> float
        pc_output_buffers_full_avg(decode_mac_soft_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(decode_mac_soft_sptr self, int which) -> float
        pc_output_buffers_full_var(decode_mac_soft_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(decode_mac_soft_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(decode_mac_soft_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(decode_mac_soft_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(decode_mac_soft_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(decode_mac_soft_sptr self) -> float"""
        return _ieee802_11_swig.decode_mac_soft_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(decode_mac_soft_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ieee802_11_swig.decode_mac_soft_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(decode_mac_soft_sptr self)"""
        return _ieee802_11_swig.decode_mac_soft_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(decode_mac_soft_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.decode_mac_soft_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(decode_mac_soft_sptr self) -> int"""
        return _ieee802_11_swig.decode_mac_soft_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(decode_mac_soft_sptr self) -> int"""
        return _ieee802_11_swig.decode_mac_soft_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(decode_mac_soft_sptr self, int priority) -> int"""
        return _ieee802_11_swig.decode_mac_soft_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(decode_mac_soft_sptr self) -> std::string"""
        return _ieee802_11_swig.decode_mac_soft_sptr_name(self)

    def symbol_name(self):
        """symbol_name(decode_mac_soft_sptr self) -> std::string"""
        return _ieee802_11_swig.decode_mac_soft_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(decode_mac_soft_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.decode_mac_soft_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(decode_mac_soft_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.decode_mac_soft_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(decode_mac_soft_sptr self) -> long"""
        return _ieee802_11_swig.decode_mac_soft_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(decode_mac_soft_sptr self) -> basic_block_sptr"""
        return _ieee802_11_swig.decode_mac_soft_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(decode_mac_soft_sptr self, int ninputs, int noutputs) -> bool"""
        return _ieee802_11_swig.decode_mac_soft_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(decode_mac_soft_sptr self) -> std::string"""
        return _ieee802_11_swig.decode_mac_soft_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(decode_mac_soft_sptr self, std::string name)"""
        return _ieee802_11_swig.decode_mac_soft_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(decode_mac_soft_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ieee802_11_swig.decode_mac_soft_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(decode_mac_soft_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.decode_mac_soft_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(decode_mac_soft_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.decode_mac_soft_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(decode_mac_soft_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ieee802_11_swig.decode_mac_soft_sptr_message_subscribers(self, *args, **kwargs)

decode_mac_soft_sptr_swigregister = _ieee802_11_swig.decode_mac_soft_sptr_swigregister
decode_mac_soft_sptr_swigregister(decode_mac_soft_sptr)

decode_mac_soft_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
decode_mac_soft = decode_mac_soft.make;

class ether_encap_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::ether_encap)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::ether_encap)> self) -> ether_encap_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::ether_encap)> self, ether_encap p) -> ether_encap_sptr
        """
        this = _ieee802_11_swig.new_ether_encap_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ether_encap_sptr self) -> ether_encap"""
        return _ieee802_11_swig.ether_encap_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_ether_encap_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(ether_encap_sptr self, bool debug) -> ether_encap_sptr"""
        return _ieee802_11_swig.ether_encap_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(ether_encap_sptr self) -> unsigned int"""
        return _ieee802_11_swig.ether_encap_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ether_encap_sptr self, int which, int delay)
        declare_sample_delay(ether_encap_sptr self, unsigned int delay)
        """
        return _ieee802_11_swig.ether_encap_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(ether_encap_sptr self, int which) -> unsigned int"""
        return _ieee802_11_swig.ether_encap_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(ether_encap_sptr self) -> int"""
        return _ieee802_11_swig.ether_encap_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ether_encap_sptr self) -> double"""
        return _ieee802_11_swig.ether_encap_sptr_relative_rate(self)

    def start(self):
        """start(ether_encap_sptr self) -> bool"""
        return _ieee802_11_swig.ether_encap_sptr_start(self)

    def stop(self):
        """stop(ether_encap_sptr self) -> bool"""
        return _ieee802_11_swig.ether_encap_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ether_encap_sptr self, unsigned int which_input) -> uint64_t"""
        return _ieee802_11_swig.ether_encap_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ether_encap_sptr self, unsigned int which_output) -> uint64_t"""
        return _ieee802_11_swig.ether_encap_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ether_encap_sptr self) -> int"""
        return _ieee802_11_swig.ether_encap_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ether_encap_sptr self, int m)"""
        return _ieee802_11_swig.ether_encap_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ether_encap_sptr self)"""
        return _ieee802_11_swig.ether_encap_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ether_encap_sptr self) -> bool"""
        return _ieee802_11_swig.ether_encap_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(ether_encap_sptr self, int m)"""
        return _ieee802_11_swig.ether_encap_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(ether_encap_sptr self) -> int"""
        return _ieee802_11_swig.ether_encap_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ether_encap_sptr self, int i) -> long"""
        return _ieee802_11_swig.ether_encap_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ether_encap_sptr self, long max_output_buffer)
        set_max_output_buffer(ether_encap_sptr self, int port, long max_output_buffer)
        """
        return _ieee802_11_swig.ether_encap_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ether_encap_sptr self, int i) -> long"""
        return _ieee802_11_swig.ether_encap_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ether_encap_sptr self, long min_output_buffer)
        set_min_output_buffer(ether_encap_sptr self, int port, long min_output_buffer)
        """
        return _ieee802_11_swig.ether_encap_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ether_encap_sptr self) -> float"""
        return _ieee802_11_swig.ether_encap_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ether_encap_sptr self) -> float"""
        return _ieee802_11_swig.ether_encap_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ether_encap_sptr self) -> float"""
        return _ieee802_11_swig.ether_encap_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ether_encap_sptr self) -> float"""
        return _ieee802_11_swig.ether_encap_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ether_encap_sptr self) -> float"""
        return _ieee802_11_swig.ether_encap_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ether_encap_sptr self) -> float"""
        return _ieee802_11_swig.ether_encap_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ether_encap_sptr self, int which) -> float
        pc_input_buffers_full(ether_encap_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.ether_encap_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ether_encap_sptr self, int which) -> float
        pc_input_buffers_full_avg(ether_encap_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.ether_encap_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ether_encap_sptr self, int which) -> float
        pc_input_buffers_full_var(ether_encap_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.ether_encap_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ether_encap_sptr self, int which) -> float
        pc_output_buffers_full(ether_encap_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.ether_encap_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ether_encap_sptr self, int which) -> float
        pc_output_buffers_full_avg(ether_encap_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.ether_encap_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ether_encap_sptr self, int which) -> float
        pc_output_buffers_full_var(ether_encap_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.ether_encap_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ether_encap_sptr self) -> float"""
        return _ieee802_11_swig.ether_encap_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(ether_encap_sptr self) -> float"""
        return _ieee802_11_swig.ether_encap_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ether_encap_sptr self) -> float"""
        return _ieee802_11_swig.ether_encap_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(ether_encap_sptr self) -> float"""
        return _ieee802_11_swig.ether_encap_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(ether_encap_sptr self) -> float"""
        return _ieee802_11_swig.ether_encap_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ether_encap_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ieee802_11_swig.ether_encap_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ether_encap_sptr self)"""
        return _ieee802_11_swig.ether_encap_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ether_encap_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.ether_encap_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(ether_encap_sptr self) -> int"""
        return _ieee802_11_swig.ether_encap_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(ether_encap_sptr self) -> int"""
        return _ieee802_11_swig.ether_encap_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(ether_encap_sptr self, int priority) -> int"""
        return _ieee802_11_swig.ether_encap_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(ether_encap_sptr self) -> std::string"""
        return _ieee802_11_swig.ether_encap_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ether_encap_sptr self) -> std::string"""
        return _ieee802_11_swig.ether_encap_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ether_encap_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.ether_encap_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ether_encap_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.ether_encap_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ether_encap_sptr self) -> long"""
        return _ieee802_11_swig.ether_encap_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ether_encap_sptr self) -> basic_block_sptr"""
        return _ieee802_11_swig.ether_encap_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ether_encap_sptr self, int ninputs, int noutputs) -> bool"""
        return _ieee802_11_swig.ether_encap_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ether_encap_sptr self) -> std::string"""
        return _ieee802_11_swig.ether_encap_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ether_encap_sptr self, std::string name)"""
        return _ieee802_11_swig.ether_encap_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ether_encap_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ieee802_11_swig.ether_encap_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ether_encap_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.ether_encap_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ether_encap_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.ether_encap_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(ether_encap_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ieee802_11_swig.ether_encap_sptr_message_subscribers(self, *args, **kwargs)

ether_encap_sptr_swigregister = _ieee802_11_swig.ether_encap_sptr_swigregister
ether_encap_sptr_swigregister(ether_encap_sptr)

ether_encap_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ether_encap = ether_encap.make;

class frame_equalizer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::frame_equalizer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::frame_equalizer)> self) -> frame_equalizer_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::frame_equalizer)> self, frame_equalizer p) -> frame_equalizer_sptr
        """
        this = _ieee802_11_swig.new_frame_equalizer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(frame_equalizer_sptr self) -> frame_equalizer"""
        return _ieee802_11_swig.frame_equalizer_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_frame_equalizer_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(frame_equalizer_sptr self, Equalizer algo, double freq, double bw, bool log, bool debug) -> frame_equalizer_sptr"""
        return _ieee802_11_swig.frame_equalizer_sptr_make(self, *args, **kwargs)

    def set_algorithm(self, *args, **kwargs):
        """set_algorithm(frame_equalizer_sptr self, Equalizer algo)"""
        return _ieee802_11_swig.frame_equalizer_sptr_set_algorithm(self, *args, **kwargs)

    def set_bandwidth(self, *args, **kwargs):
        """set_bandwidth(frame_equalizer_sptr self, double bw)"""
        return _ieee802_11_swig.frame_equalizer_sptr_set_bandwidth(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(frame_equalizer_sptr self, double freq)"""
        return _ieee802_11_swig.frame_equalizer_sptr_set_frequency(self, *args, **kwargs)

    def history(self):
        """history(frame_equalizer_sptr self) -> unsigned int"""
        return _ieee802_11_swig.frame_equalizer_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(frame_equalizer_sptr self, int which, int delay)
        declare_sample_delay(frame_equalizer_sptr self, unsigned int delay)
        """
        return _ieee802_11_swig.frame_equalizer_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(frame_equalizer_sptr self, int which) -> unsigned int"""
        return _ieee802_11_swig.frame_equalizer_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(frame_equalizer_sptr self) -> int"""
        return _ieee802_11_swig.frame_equalizer_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(frame_equalizer_sptr self) -> double"""
        return _ieee802_11_swig.frame_equalizer_sptr_relative_rate(self)

    def start(self):
        """start(frame_equalizer_sptr self) -> bool"""
        return _ieee802_11_swig.frame_equalizer_sptr_start(self)

    def stop(self):
        """stop(frame_equalizer_sptr self) -> bool"""
        return _ieee802_11_swig.frame_equalizer_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(frame_equalizer_sptr self, unsigned int which_input) -> uint64_t"""
        return _ieee802_11_swig.frame_equalizer_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(frame_equalizer_sptr self, unsigned int which_output) -> uint64_t"""
        return _ieee802_11_swig.frame_equalizer_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(frame_equalizer_sptr self) -> int"""
        return _ieee802_11_swig.frame_equalizer_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(frame_equalizer_sptr self, int m)"""
        return _ieee802_11_swig.frame_equalizer_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(frame_equalizer_sptr self)"""
        return _ieee802_11_swig.frame_equalizer_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(frame_equalizer_sptr self) -> bool"""
        return _ieee802_11_swig.frame_equalizer_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(frame_equalizer_sptr self, int m)"""
        return _ieee802_11_swig.frame_equalizer_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(frame_equalizer_sptr self) -> int"""
        return _ieee802_11_swig.frame_equalizer_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(frame_equalizer_sptr self, int i) -> long"""
        return _ieee802_11_swig.frame_equalizer_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(frame_equalizer_sptr self, long max_output_buffer)
        set_max_output_buffer(frame_equalizer_sptr self, int port, long max_output_buffer)
        """
        return _ieee802_11_swig.frame_equalizer_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(frame_equalizer_sptr self, int i) -> long"""
        return _ieee802_11_swig.frame_equalizer_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(frame_equalizer_sptr self, long min_output_buffer)
        set_min_output_buffer(frame_equalizer_sptr self, int port, long min_output_buffer)
        """
        return _ieee802_11_swig.frame_equalizer_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.frame_equalizer_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.frame_equalizer_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.frame_equalizer_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.frame_equalizer_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.frame_equalizer_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.frame_equalizer_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(frame_equalizer_sptr self, int which) -> float
        pc_input_buffers_full(frame_equalizer_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.frame_equalizer_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(frame_equalizer_sptr self, int which) -> float
        pc_input_buffers_full_avg(frame_equalizer_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.frame_equalizer_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(frame_equalizer_sptr self, int which) -> float
        pc_input_buffers_full_var(frame_equalizer_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.frame_equalizer_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(frame_equalizer_sptr self, int which) -> float
        pc_output_buffers_full(frame_equalizer_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.frame_equalizer_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(frame_equalizer_sptr self, int which) -> float
        pc_output_buffers_full_avg(frame_equalizer_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.frame_equalizer_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(frame_equalizer_sptr self, int which) -> float
        pc_output_buffers_full_var(frame_equalizer_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.frame_equalizer_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.frame_equalizer_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.frame_equalizer_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.frame_equalizer_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.frame_equalizer_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.frame_equalizer_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(frame_equalizer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ieee802_11_swig.frame_equalizer_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(frame_equalizer_sptr self)"""
        return _ieee802_11_swig.frame_equalizer_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(frame_equalizer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.frame_equalizer_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(frame_equalizer_sptr self) -> int"""
        return _ieee802_11_swig.frame_equalizer_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(frame_equalizer_sptr self) -> int"""
        return _ieee802_11_swig.frame_equalizer_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(frame_equalizer_sptr self, int priority) -> int"""
        return _ieee802_11_swig.frame_equalizer_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(frame_equalizer_sptr self) -> std::string"""
        return _ieee802_11_swig.frame_equalizer_sptr_name(self)

    def symbol_name(self):
        """symbol_name(frame_equalizer_sptr self) -> std::string"""
        return _ieee802_11_swig.frame_equalizer_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(frame_equalizer_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.frame_equalizer_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(frame_equalizer_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.frame_equalizer_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(frame_equalizer_sptr self) -> long"""
        return _ieee802_11_swig.frame_equalizer_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(frame_equalizer_sptr self) -> basic_block_sptr"""
        return _ieee802_11_swig.frame_equalizer_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(frame_equalizer_sptr self, int ninputs, int noutputs) -> bool"""
        return _ieee802_11_swig.frame_equalizer_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(frame_equalizer_sptr self) -> std::string"""
        return _ieee802_11_swig.frame_equalizer_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(frame_equalizer_sptr self, std::string name)"""
        return _ieee802_11_swig.frame_equalizer_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(frame_equalizer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ieee802_11_swig.frame_equalizer_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(frame_equalizer_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.frame_equalizer_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(frame_equalizer_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.frame_equalizer_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(frame_equalizer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ieee802_11_swig.frame_equalizer_sptr_message_subscribers(self, *args, **kwargs)

frame_equalizer_sptr_swigregister = _ieee802_11_swig.frame_equalizer_sptr_swigregister
frame_equalizer_sptr_swigregister(frame_equalizer_sptr)

frame_equalizer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
frame_equalizer = frame_equalizer.make;

class soft_frame_equalizer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::soft_frame_equalizer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::soft_frame_equalizer)> self) -> soft_frame_equalizer_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::soft_frame_equalizer)> self, soft_frame_equalizer p) -> soft_frame_equalizer_sptr
        """
        this = _ieee802_11_swig.new_soft_frame_equalizer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(soft_frame_equalizer_sptr self) -> soft_frame_equalizer"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_soft_frame_equalizer_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(soft_frame_equalizer_sptr self, Equalizer_soft algo, double freq, double bw, bool log, bool debug) -> soft_frame_equalizer_sptr"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_make(self, *args, **kwargs)

    def set_algorithm(self, *args, **kwargs):
        """set_algorithm(soft_frame_equalizer_sptr self, Equalizer_soft algo)"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_set_algorithm(self, *args, **kwargs)

    def set_bandwidth(self, *args, **kwargs):
        """set_bandwidth(soft_frame_equalizer_sptr self, double bw)"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_set_bandwidth(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(soft_frame_equalizer_sptr self, double freq)"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_set_frequency(self, *args, **kwargs)

    def history(self):
        """history(soft_frame_equalizer_sptr self) -> unsigned int"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(soft_frame_equalizer_sptr self, int which, int delay)
        declare_sample_delay(soft_frame_equalizer_sptr self, unsigned int delay)
        """
        return _ieee802_11_swig.soft_frame_equalizer_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(soft_frame_equalizer_sptr self, int which) -> unsigned int"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(soft_frame_equalizer_sptr self) -> int"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(soft_frame_equalizer_sptr self) -> double"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_relative_rate(self)

    def start(self):
        """start(soft_frame_equalizer_sptr self) -> bool"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_start(self)

    def stop(self):
        """stop(soft_frame_equalizer_sptr self) -> bool"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(soft_frame_equalizer_sptr self, unsigned int which_input) -> uint64_t"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(soft_frame_equalizer_sptr self, unsigned int which_output) -> uint64_t"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(soft_frame_equalizer_sptr self) -> int"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(soft_frame_equalizer_sptr self, int m)"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(soft_frame_equalizer_sptr self)"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(soft_frame_equalizer_sptr self) -> bool"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(soft_frame_equalizer_sptr self, int m)"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(soft_frame_equalizer_sptr self) -> int"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(soft_frame_equalizer_sptr self, int i) -> long"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(soft_frame_equalizer_sptr self, long max_output_buffer)
        set_max_output_buffer(soft_frame_equalizer_sptr self, int port, long max_output_buffer)
        """
        return _ieee802_11_swig.soft_frame_equalizer_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(soft_frame_equalizer_sptr self, int i) -> long"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(soft_frame_equalizer_sptr self, long min_output_buffer)
        set_min_output_buffer(soft_frame_equalizer_sptr self, int port, long min_output_buffer)
        """
        return _ieee802_11_swig.soft_frame_equalizer_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(soft_frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(soft_frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(soft_frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(soft_frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(soft_frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(soft_frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(soft_frame_equalizer_sptr self, int which) -> float
        pc_input_buffers_full(soft_frame_equalizer_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(soft_frame_equalizer_sptr self, int which) -> float
        pc_input_buffers_full_avg(soft_frame_equalizer_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(soft_frame_equalizer_sptr self, int which) -> float
        pc_input_buffers_full_var(soft_frame_equalizer_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(soft_frame_equalizer_sptr self, int which) -> float
        pc_output_buffers_full(soft_frame_equalizer_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(soft_frame_equalizer_sptr self, int which) -> float
        pc_output_buffers_full_avg(soft_frame_equalizer_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(soft_frame_equalizer_sptr self, int which) -> float
        pc_output_buffers_full_var(soft_frame_equalizer_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(soft_frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(soft_frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(soft_frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(soft_frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(soft_frame_equalizer_sptr self) -> float"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(soft_frame_equalizer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(soft_frame_equalizer_sptr self)"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(soft_frame_equalizer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(soft_frame_equalizer_sptr self) -> int"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(soft_frame_equalizer_sptr self) -> int"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(soft_frame_equalizer_sptr self, int priority) -> int"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(soft_frame_equalizer_sptr self) -> std::string"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_name(self)

    def symbol_name(self):
        """symbol_name(soft_frame_equalizer_sptr self) -> std::string"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(soft_frame_equalizer_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(soft_frame_equalizer_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(soft_frame_equalizer_sptr self) -> long"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(soft_frame_equalizer_sptr self) -> basic_block_sptr"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(soft_frame_equalizer_sptr self, int ninputs, int noutputs) -> bool"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(soft_frame_equalizer_sptr self) -> std::string"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(soft_frame_equalizer_sptr self, std::string name)"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(soft_frame_equalizer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(soft_frame_equalizer_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(soft_frame_equalizer_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(soft_frame_equalizer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ieee802_11_swig.soft_frame_equalizer_sptr_message_subscribers(self, *args, **kwargs)

soft_frame_equalizer_sptr_swigregister = _ieee802_11_swig.soft_frame_equalizer_sptr_swigregister
soft_frame_equalizer_sptr_swigregister(soft_frame_equalizer_sptr)

soft_frame_equalizer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
soft_frame_equalizer = soft_frame_equalizer.make;

class mac_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::mac)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::mac)> self) -> mac_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::mac)> self, mac p) -> mac_sptr
        """
        this = _ieee802_11_swig.new_mac_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mac_sptr self) -> mac"""
        return _ieee802_11_swig.mac_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_mac_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mac_sptr self, std::vector< uint8_t,std::allocator< uint8_t > > src_mac, std::vector< uint8_t,std::allocator< uint8_t > > dst_mac, 
            std::vector< uint8_t,std::allocator< uint8_t > > bss_mac) -> mac_sptr
        """
        return _ieee802_11_swig.mac_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mac_sptr self) -> unsigned int"""
        return _ieee802_11_swig.mac_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mac_sptr self, int which, int delay)
        declare_sample_delay(mac_sptr self, unsigned int delay)
        """
        return _ieee802_11_swig.mac_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mac_sptr self, int which) -> unsigned int"""
        return _ieee802_11_swig.mac_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mac_sptr self) -> int"""
        return _ieee802_11_swig.mac_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mac_sptr self) -> double"""
        return _ieee802_11_swig.mac_sptr_relative_rate(self)

    def start(self):
        """start(mac_sptr self) -> bool"""
        return _ieee802_11_swig.mac_sptr_start(self)

    def stop(self):
        """stop(mac_sptr self) -> bool"""
        return _ieee802_11_swig.mac_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mac_sptr self, unsigned int which_input) -> uint64_t"""
        return _ieee802_11_swig.mac_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mac_sptr self, unsigned int which_output) -> uint64_t"""
        return _ieee802_11_swig.mac_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mac_sptr self) -> int"""
        return _ieee802_11_swig.mac_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mac_sptr self, int m)"""
        return _ieee802_11_swig.mac_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mac_sptr self)"""
        return _ieee802_11_swig.mac_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mac_sptr self) -> bool"""
        return _ieee802_11_swig.mac_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mac_sptr self, int m)"""
        return _ieee802_11_swig.mac_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mac_sptr self) -> int"""
        return _ieee802_11_swig.mac_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mac_sptr self, int i) -> long"""
        return _ieee802_11_swig.mac_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mac_sptr self, long max_output_buffer)
        set_max_output_buffer(mac_sptr self, int port, long max_output_buffer)
        """
        return _ieee802_11_swig.mac_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mac_sptr self, int i) -> long"""
        return _ieee802_11_swig.mac_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mac_sptr self, long min_output_buffer)
        set_min_output_buffer(mac_sptr self, int port, long min_output_buffer)
        """
        return _ieee802_11_swig.mac_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mac_sptr self) -> float"""
        return _ieee802_11_swig.mac_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mac_sptr self) -> float"""
        return _ieee802_11_swig.mac_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mac_sptr self) -> float"""
        return _ieee802_11_swig.mac_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mac_sptr self) -> float"""
        return _ieee802_11_swig.mac_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mac_sptr self) -> float"""
        return _ieee802_11_swig.mac_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mac_sptr self) -> float"""
        return _ieee802_11_swig.mac_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mac_sptr self, int which) -> float
        pc_input_buffers_full(mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.mac_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mac_sptr self, int which) -> float
        pc_input_buffers_full_avg(mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.mac_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mac_sptr self, int which) -> float
        pc_input_buffers_full_var(mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.mac_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mac_sptr self, int which) -> float
        pc_output_buffers_full(mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.mac_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mac_sptr self, int which) -> float
        pc_output_buffers_full_avg(mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.mac_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mac_sptr self, int which) -> float
        pc_output_buffers_full_var(mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.mac_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mac_sptr self) -> float"""
        return _ieee802_11_swig.mac_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mac_sptr self) -> float"""
        return _ieee802_11_swig.mac_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mac_sptr self) -> float"""
        return _ieee802_11_swig.mac_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mac_sptr self) -> float"""
        return _ieee802_11_swig.mac_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(mac_sptr self) -> float"""
        return _ieee802_11_swig.mac_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mac_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ieee802_11_swig.mac_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mac_sptr self)"""
        return _ieee802_11_swig.mac_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mac_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.mac_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mac_sptr self) -> int"""
        return _ieee802_11_swig.mac_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mac_sptr self) -> int"""
        return _ieee802_11_swig.mac_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mac_sptr self, int priority) -> int"""
        return _ieee802_11_swig.mac_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mac_sptr self) -> std::string"""
        return _ieee802_11_swig.mac_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mac_sptr self) -> std::string"""
        return _ieee802_11_swig.mac_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mac_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.mac_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mac_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.mac_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mac_sptr self) -> long"""
        return _ieee802_11_swig.mac_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mac_sptr self) -> basic_block_sptr"""
        return _ieee802_11_swig.mac_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mac_sptr self, int ninputs, int noutputs) -> bool"""
        return _ieee802_11_swig.mac_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mac_sptr self) -> std::string"""
        return _ieee802_11_swig.mac_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mac_sptr self, std::string name)"""
        return _ieee802_11_swig.mac_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mac_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ieee802_11_swig.mac_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mac_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.mac_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mac_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.mac_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mac_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ieee802_11_swig.mac_sptr_message_subscribers(self, *args, **kwargs)

mac_sptr_swigregister = _ieee802_11_swig.mac_sptr_swigregister
mac_sptr_swigregister(mac_sptr)

mac_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mac = mac.make;

class mapper_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::mapper)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::mapper)> self) -> mapper_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::mapper)> self, mapper p) -> mapper_sptr
        """
        this = _ieee802_11_swig.new_mapper_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mapper_sptr self) -> mapper"""
        return _ieee802_11_swig.mapper_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_mapper_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(mapper_sptr self, Encoding mcs, bool debug=False) -> mapper_sptr"""
        return _ieee802_11_swig.mapper_sptr_make(self, *args, **kwargs)

    def set_encoding(self, *args, **kwargs):
        """set_encoding(mapper_sptr self, Encoding mcs)"""
        return _ieee802_11_swig.mapper_sptr_set_encoding(self, *args, **kwargs)

    def history(self):
        """history(mapper_sptr self) -> unsigned int"""
        return _ieee802_11_swig.mapper_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mapper_sptr self, int which, int delay)
        declare_sample_delay(mapper_sptr self, unsigned int delay)
        """
        return _ieee802_11_swig.mapper_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mapper_sptr self, int which) -> unsigned int"""
        return _ieee802_11_swig.mapper_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mapper_sptr self) -> int"""
        return _ieee802_11_swig.mapper_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mapper_sptr self) -> double"""
        return _ieee802_11_swig.mapper_sptr_relative_rate(self)

    def start(self):
        """start(mapper_sptr self) -> bool"""
        return _ieee802_11_swig.mapper_sptr_start(self)

    def stop(self):
        """stop(mapper_sptr self) -> bool"""
        return _ieee802_11_swig.mapper_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mapper_sptr self, unsigned int which_input) -> uint64_t"""
        return _ieee802_11_swig.mapper_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mapper_sptr self, unsigned int which_output) -> uint64_t"""
        return _ieee802_11_swig.mapper_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mapper_sptr self) -> int"""
        return _ieee802_11_swig.mapper_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mapper_sptr self, int m)"""
        return _ieee802_11_swig.mapper_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mapper_sptr self)"""
        return _ieee802_11_swig.mapper_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mapper_sptr self) -> bool"""
        return _ieee802_11_swig.mapper_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mapper_sptr self, int m)"""
        return _ieee802_11_swig.mapper_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mapper_sptr self) -> int"""
        return _ieee802_11_swig.mapper_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mapper_sptr self, int i) -> long"""
        return _ieee802_11_swig.mapper_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mapper_sptr self, long max_output_buffer)
        set_max_output_buffer(mapper_sptr self, int port, long max_output_buffer)
        """
        return _ieee802_11_swig.mapper_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mapper_sptr self, int i) -> long"""
        return _ieee802_11_swig.mapper_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mapper_sptr self, long min_output_buffer)
        set_min_output_buffer(mapper_sptr self, int port, long min_output_buffer)
        """
        return _ieee802_11_swig.mapper_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mapper_sptr self) -> float"""
        return _ieee802_11_swig.mapper_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mapper_sptr self) -> float"""
        return _ieee802_11_swig.mapper_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mapper_sptr self) -> float"""
        return _ieee802_11_swig.mapper_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mapper_sptr self) -> float"""
        return _ieee802_11_swig.mapper_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mapper_sptr self) -> float"""
        return _ieee802_11_swig.mapper_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mapper_sptr self) -> float"""
        return _ieee802_11_swig.mapper_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mapper_sptr self, int which) -> float
        pc_input_buffers_full(mapper_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.mapper_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mapper_sptr self, int which) -> float
        pc_input_buffers_full_avg(mapper_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.mapper_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mapper_sptr self, int which) -> float
        pc_input_buffers_full_var(mapper_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.mapper_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mapper_sptr self, int which) -> float
        pc_output_buffers_full(mapper_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.mapper_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mapper_sptr self, int which) -> float
        pc_output_buffers_full_avg(mapper_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.mapper_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mapper_sptr self, int which) -> float
        pc_output_buffers_full_var(mapper_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.mapper_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mapper_sptr self) -> float"""
        return _ieee802_11_swig.mapper_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mapper_sptr self) -> float"""
        return _ieee802_11_swig.mapper_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mapper_sptr self) -> float"""
        return _ieee802_11_swig.mapper_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mapper_sptr self) -> float"""
        return _ieee802_11_swig.mapper_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(mapper_sptr self) -> float"""
        return _ieee802_11_swig.mapper_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mapper_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ieee802_11_swig.mapper_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mapper_sptr self)"""
        return _ieee802_11_swig.mapper_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mapper_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.mapper_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mapper_sptr self) -> int"""
        return _ieee802_11_swig.mapper_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mapper_sptr self) -> int"""
        return _ieee802_11_swig.mapper_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mapper_sptr self, int priority) -> int"""
        return _ieee802_11_swig.mapper_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mapper_sptr self) -> std::string"""
        return _ieee802_11_swig.mapper_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mapper_sptr self) -> std::string"""
        return _ieee802_11_swig.mapper_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mapper_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.mapper_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mapper_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.mapper_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mapper_sptr self) -> long"""
        return _ieee802_11_swig.mapper_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mapper_sptr self) -> basic_block_sptr"""
        return _ieee802_11_swig.mapper_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mapper_sptr self, int ninputs, int noutputs) -> bool"""
        return _ieee802_11_swig.mapper_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mapper_sptr self) -> std::string"""
        return _ieee802_11_swig.mapper_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mapper_sptr self, std::string name)"""
        return _ieee802_11_swig.mapper_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mapper_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ieee802_11_swig.mapper_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mapper_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.mapper_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mapper_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.mapper_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mapper_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ieee802_11_swig.mapper_sptr_message_subscribers(self, *args, **kwargs)

mapper_sptr_swigregister = _ieee802_11_swig.mapper_sptr_swigregister
mapper_sptr_swigregister(mapper_sptr)

mapper_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mapper = mapper.make;

class moving_average_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::moving_average_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::moving_average_cc)> self) -> moving_average_cc_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::moving_average_cc)> self, moving_average_cc p) -> moving_average_cc_sptr
        """
        this = _ieee802_11_swig.new_moving_average_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(moving_average_cc_sptr self) -> moving_average_cc"""
        return _ieee802_11_swig.moving_average_cc_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_moving_average_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(moving_average_cc_sptr self, int length) -> moving_average_cc_sptr"""
        return _ieee802_11_swig.moving_average_cc_sptr_make(self, *args, **kwargs)

    def length(self):
        """length(moving_average_cc_sptr self) -> int"""
        return _ieee802_11_swig.moving_average_cc_sptr_length(self)

    def set_length(self, *args, **kwargs):
        """set_length(moving_average_cc_sptr self, int length)"""
        return _ieee802_11_swig.moving_average_cc_sptr_set_length(self, *args, **kwargs)

    def history(self):
        """history(moving_average_cc_sptr self) -> unsigned int"""
        return _ieee802_11_swig.moving_average_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(moving_average_cc_sptr self, int which, int delay)
        declare_sample_delay(moving_average_cc_sptr self, unsigned int delay)
        """
        return _ieee802_11_swig.moving_average_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(moving_average_cc_sptr self, int which) -> unsigned int"""
        return _ieee802_11_swig.moving_average_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(moving_average_cc_sptr self) -> int"""
        return _ieee802_11_swig.moving_average_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(moving_average_cc_sptr self) -> double"""
        return _ieee802_11_swig.moving_average_cc_sptr_relative_rate(self)

    def start(self):
        """start(moving_average_cc_sptr self) -> bool"""
        return _ieee802_11_swig.moving_average_cc_sptr_start(self)

    def stop(self):
        """stop(moving_average_cc_sptr self) -> bool"""
        return _ieee802_11_swig.moving_average_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(moving_average_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _ieee802_11_swig.moving_average_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(moving_average_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _ieee802_11_swig.moving_average_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(moving_average_cc_sptr self) -> int"""
        return _ieee802_11_swig.moving_average_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(moving_average_cc_sptr self, int m)"""
        return _ieee802_11_swig.moving_average_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(moving_average_cc_sptr self)"""
        return _ieee802_11_swig.moving_average_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(moving_average_cc_sptr self) -> bool"""
        return _ieee802_11_swig.moving_average_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(moving_average_cc_sptr self, int m)"""
        return _ieee802_11_swig.moving_average_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(moving_average_cc_sptr self) -> int"""
        return _ieee802_11_swig.moving_average_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(moving_average_cc_sptr self, int i) -> long"""
        return _ieee802_11_swig.moving_average_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(moving_average_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_average_cc_sptr self, int port, long max_output_buffer)
        """
        return _ieee802_11_swig.moving_average_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(moving_average_cc_sptr self, int i) -> long"""
        return _ieee802_11_swig.moving_average_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(moving_average_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_average_cc_sptr self, int port, long min_output_buffer)
        """
        return _ieee802_11_swig.moving_average_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(moving_average_cc_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(moving_average_cc_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(moving_average_cc_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(moving_average_cc_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(moving_average_cc_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(moving_average_cc_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(moving_average_cc_sptr self, int which) -> float
        pc_input_buffers_full(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.moving_average_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(moving_average_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.moving_average_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(moving_average_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.moving_average_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(moving_average_cc_sptr self, int which) -> float
        pc_output_buffers_full(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.moving_average_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(moving_average_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.moving_average_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(moving_average_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.moving_average_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(moving_average_cc_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(moving_average_cc_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(moving_average_cc_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(moving_average_cc_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(moving_average_cc_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(moving_average_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ieee802_11_swig.moving_average_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(moving_average_cc_sptr self)"""
        return _ieee802_11_swig.moving_average_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(moving_average_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.moving_average_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(moving_average_cc_sptr self) -> int"""
        return _ieee802_11_swig.moving_average_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(moving_average_cc_sptr self) -> int"""
        return _ieee802_11_swig.moving_average_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(moving_average_cc_sptr self, int priority) -> int"""
        return _ieee802_11_swig.moving_average_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(moving_average_cc_sptr self) -> std::string"""
        return _ieee802_11_swig.moving_average_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(moving_average_cc_sptr self) -> std::string"""
        return _ieee802_11_swig.moving_average_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(moving_average_cc_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.moving_average_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(moving_average_cc_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.moving_average_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(moving_average_cc_sptr self) -> long"""
        return _ieee802_11_swig.moving_average_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(moving_average_cc_sptr self) -> basic_block_sptr"""
        return _ieee802_11_swig.moving_average_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(moving_average_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _ieee802_11_swig.moving_average_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(moving_average_cc_sptr self) -> std::string"""
        return _ieee802_11_swig.moving_average_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(moving_average_cc_sptr self, std::string name)"""
        return _ieee802_11_swig.moving_average_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(moving_average_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ieee802_11_swig.moving_average_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(moving_average_cc_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.moving_average_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(moving_average_cc_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.moving_average_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(moving_average_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ieee802_11_swig.moving_average_cc_sptr_message_subscribers(self, *args, **kwargs)

moving_average_cc_sptr_swigregister = _ieee802_11_swig.moving_average_cc_sptr_swigregister
moving_average_cc_sptr_swigregister(moving_average_cc_sptr)

moving_average_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_average_cc = moving_average_cc.make;

class moving_average_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::moving_average_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::moving_average_ff)> self) -> moving_average_ff_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::moving_average_ff)> self, moving_average_ff p) -> moving_average_ff_sptr
        """
        this = _ieee802_11_swig.new_moving_average_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(moving_average_ff_sptr self) -> moving_average_ff"""
        return _ieee802_11_swig.moving_average_ff_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_moving_average_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(moving_average_ff_sptr self, int length) -> moving_average_ff_sptr"""
        return _ieee802_11_swig.moving_average_ff_sptr_make(self, *args, **kwargs)

    def length(self):
        """length(moving_average_ff_sptr self) -> int"""
        return _ieee802_11_swig.moving_average_ff_sptr_length(self)

    def set_length(self, *args, **kwargs):
        """set_length(moving_average_ff_sptr self, int length)"""
        return _ieee802_11_swig.moving_average_ff_sptr_set_length(self, *args, **kwargs)

    def history(self):
        """history(moving_average_ff_sptr self) -> unsigned int"""
        return _ieee802_11_swig.moving_average_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(moving_average_ff_sptr self, int which, int delay)
        declare_sample_delay(moving_average_ff_sptr self, unsigned int delay)
        """
        return _ieee802_11_swig.moving_average_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(moving_average_ff_sptr self, int which) -> unsigned int"""
        return _ieee802_11_swig.moving_average_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(moving_average_ff_sptr self) -> int"""
        return _ieee802_11_swig.moving_average_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(moving_average_ff_sptr self) -> double"""
        return _ieee802_11_swig.moving_average_ff_sptr_relative_rate(self)

    def start(self):
        """start(moving_average_ff_sptr self) -> bool"""
        return _ieee802_11_swig.moving_average_ff_sptr_start(self)

    def stop(self):
        """stop(moving_average_ff_sptr self) -> bool"""
        return _ieee802_11_swig.moving_average_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(moving_average_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _ieee802_11_swig.moving_average_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(moving_average_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _ieee802_11_swig.moving_average_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(moving_average_ff_sptr self) -> int"""
        return _ieee802_11_swig.moving_average_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(moving_average_ff_sptr self, int m)"""
        return _ieee802_11_swig.moving_average_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(moving_average_ff_sptr self)"""
        return _ieee802_11_swig.moving_average_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(moving_average_ff_sptr self) -> bool"""
        return _ieee802_11_swig.moving_average_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(moving_average_ff_sptr self, int m)"""
        return _ieee802_11_swig.moving_average_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(moving_average_ff_sptr self) -> int"""
        return _ieee802_11_swig.moving_average_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(moving_average_ff_sptr self, int i) -> long"""
        return _ieee802_11_swig.moving_average_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(moving_average_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_average_ff_sptr self, int port, long max_output_buffer)
        """
        return _ieee802_11_swig.moving_average_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(moving_average_ff_sptr self, int i) -> long"""
        return _ieee802_11_swig.moving_average_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(moving_average_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_average_ff_sptr self, int port, long min_output_buffer)
        """
        return _ieee802_11_swig.moving_average_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(moving_average_ff_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(moving_average_ff_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(moving_average_ff_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(moving_average_ff_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(moving_average_ff_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(moving_average_ff_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(moving_average_ff_sptr self, int which) -> float
        pc_input_buffers_full(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.moving_average_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(moving_average_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.moving_average_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(moving_average_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.moving_average_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(moving_average_ff_sptr self, int which) -> float
        pc_output_buffers_full(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.moving_average_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(moving_average_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.moving_average_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(moving_average_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.moving_average_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(moving_average_ff_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(moving_average_ff_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(moving_average_ff_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(moving_average_ff_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(moving_average_ff_sptr self) -> float"""
        return _ieee802_11_swig.moving_average_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(moving_average_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ieee802_11_swig.moving_average_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(moving_average_ff_sptr self)"""
        return _ieee802_11_swig.moving_average_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(moving_average_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.moving_average_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(moving_average_ff_sptr self) -> int"""
        return _ieee802_11_swig.moving_average_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(moving_average_ff_sptr self) -> int"""
        return _ieee802_11_swig.moving_average_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(moving_average_ff_sptr self, int priority) -> int"""
        return _ieee802_11_swig.moving_average_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(moving_average_ff_sptr self) -> std::string"""
        return _ieee802_11_swig.moving_average_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(moving_average_ff_sptr self) -> std::string"""
        return _ieee802_11_swig.moving_average_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(moving_average_ff_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.moving_average_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(moving_average_ff_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.moving_average_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(moving_average_ff_sptr self) -> long"""
        return _ieee802_11_swig.moving_average_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(moving_average_ff_sptr self) -> basic_block_sptr"""
        return _ieee802_11_swig.moving_average_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(moving_average_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _ieee802_11_swig.moving_average_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(moving_average_ff_sptr self) -> std::string"""
        return _ieee802_11_swig.moving_average_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(moving_average_ff_sptr self, std::string name)"""
        return _ieee802_11_swig.moving_average_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(moving_average_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ieee802_11_swig.moving_average_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(moving_average_ff_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.moving_average_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(moving_average_ff_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.moving_average_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(moving_average_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ieee802_11_swig.moving_average_ff_sptr_message_subscribers(self, *args, **kwargs)

moving_average_ff_sptr_swigregister = _ieee802_11_swig.moving_average_ff_sptr_swigregister
moving_average_ff_sptr_swigregister(moving_average_ff_sptr)

moving_average_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_average_ff = moving_average_ff.make;

class parse_mac_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::parse_mac)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::parse_mac)> self) -> parse_mac_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::parse_mac)> self, parse_mac p) -> parse_mac_sptr
        """
        this = _ieee802_11_swig.new_parse_mac_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(parse_mac_sptr self) -> parse_mac"""
        return _ieee802_11_swig.parse_mac_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_parse_mac_sptr
    __del__ = lambda self : None;
    def make(self, log=False, debug=False):
        """make(parse_mac_sptr self, bool log=False, bool debug=False) -> parse_mac_sptr"""
        return _ieee802_11_swig.parse_mac_sptr_make(self, log, debug)

    def history(self):
        """history(parse_mac_sptr self) -> unsigned int"""
        return _ieee802_11_swig.parse_mac_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(parse_mac_sptr self, int which, int delay)
        declare_sample_delay(parse_mac_sptr self, unsigned int delay)
        """
        return _ieee802_11_swig.parse_mac_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(parse_mac_sptr self, int which) -> unsigned int"""
        return _ieee802_11_swig.parse_mac_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(parse_mac_sptr self) -> int"""
        return _ieee802_11_swig.parse_mac_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(parse_mac_sptr self) -> double"""
        return _ieee802_11_swig.parse_mac_sptr_relative_rate(self)

    def start(self):
        """start(parse_mac_sptr self) -> bool"""
        return _ieee802_11_swig.parse_mac_sptr_start(self)

    def stop(self):
        """stop(parse_mac_sptr self) -> bool"""
        return _ieee802_11_swig.parse_mac_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(parse_mac_sptr self, unsigned int which_input) -> uint64_t"""
        return _ieee802_11_swig.parse_mac_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(parse_mac_sptr self, unsigned int which_output) -> uint64_t"""
        return _ieee802_11_swig.parse_mac_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(parse_mac_sptr self) -> int"""
        return _ieee802_11_swig.parse_mac_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(parse_mac_sptr self, int m)"""
        return _ieee802_11_swig.parse_mac_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(parse_mac_sptr self)"""
        return _ieee802_11_swig.parse_mac_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(parse_mac_sptr self) -> bool"""
        return _ieee802_11_swig.parse_mac_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(parse_mac_sptr self, int m)"""
        return _ieee802_11_swig.parse_mac_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(parse_mac_sptr self) -> int"""
        return _ieee802_11_swig.parse_mac_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(parse_mac_sptr self, int i) -> long"""
        return _ieee802_11_swig.parse_mac_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(parse_mac_sptr self, long max_output_buffer)
        set_max_output_buffer(parse_mac_sptr self, int port, long max_output_buffer)
        """
        return _ieee802_11_swig.parse_mac_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(parse_mac_sptr self, int i) -> long"""
        return _ieee802_11_swig.parse_mac_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(parse_mac_sptr self, long min_output_buffer)
        set_min_output_buffer(parse_mac_sptr self, int port, long min_output_buffer)
        """
        return _ieee802_11_swig.parse_mac_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(parse_mac_sptr self) -> float"""
        return _ieee802_11_swig.parse_mac_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(parse_mac_sptr self) -> float"""
        return _ieee802_11_swig.parse_mac_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(parse_mac_sptr self) -> float"""
        return _ieee802_11_swig.parse_mac_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(parse_mac_sptr self) -> float"""
        return _ieee802_11_swig.parse_mac_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(parse_mac_sptr self) -> float"""
        return _ieee802_11_swig.parse_mac_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(parse_mac_sptr self) -> float"""
        return _ieee802_11_swig.parse_mac_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(parse_mac_sptr self, int which) -> float
        pc_input_buffers_full(parse_mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.parse_mac_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(parse_mac_sptr self, int which) -> float
        pc_input_buffers_full_avg(parse_mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.parse_mac_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(parse_mac_sptr self, int which) -> float
        pc_input_buffers_full_var(parse_mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.parse_mac_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(parse_mac_sptr self, int which) -> float
        pc_output_buffers_full(parse_mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.parse_mac_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(parse_mac_sptr self, int which) -> float
        pc_output_buffers_full_avg(parse_mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.parse_mac_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(parse_mac_sptr self, int which) -> float
        pc_output_buffers_full_var(parse_mac_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.parse_mac_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(parse_mac_sptr self) -> float"""
        return _ieee802_11_swig.parse_mac_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(parse_mac_sptr self) -> float"""
        return _ieee802_11_swig.parse_mac_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(parse_mac_sptr self) -> float"""
        return _ieee802_11_swig.parse_mac_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(parse_mac_sptr self) -> float"""
        return _ieee802_11_swig.parse_mac_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(parse_mac_sptr self) -> float"""
        return _ieee802_11_swig.parse_mac_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(parse_mac_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ieee802_11_swig.parse_mac_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(parse_mac_sptr self)"""
        return _ieee802_11_swig.parse_mac_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(parse_mac_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.parse_mac_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(parse_mac_sptr self) -> int"""
        return _ieee802_11_swig.parse_mac_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(parse_mac_sptr self) -> int"""
        return _ieee802_11_swig.parse_mac_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(parse_mac_sptr self, int priority) -> int"""
        return _ieee802_11_swig.parse_mac_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(parse_mac_sptr self) -> std::string"""
        return _ieee802_11_swig.parse_mac_sptr_name(self)

    def symbol_name(self):
        """symbol_name(parse_mac_sptr self) -> std::string"""
        return _ieee802_11_swig.parse_mac_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(parse_mac_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.parse_mac_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(parse_mac_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.parse_mac_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(parse_mac_sptr self) -> long"""
        return _ieee802_11_swig.parse_mac_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(parse_mac_sptr self) -> basic_block_sptr"""
        return _ieee802_11_swig.parse_mac_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(parse_mac_sptr self, int ninputs, int noutputs) -> bool"""
        return _ieee802_11_swig.parse_mac_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(parse_mac_sptr self) -> std::string"""
        return _ieee802_11_swig.parse_mac_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(parse_mac_sptr self, std::string name)"""
        return _ieee802_11_swig.parse_mac_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(parse_mac_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ieee802_11_swig.parse_mac_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(parse_mac_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.parse_mac_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(parse_mac_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.parse_mac_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(parse_mac_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ieee802_11_swig.parse_mac_sptr_message_subscribers(self, *args, **kwargs)

parse_mac_sptr_swigregister = _ieee802_11_swig.parse_mac_sptr_swigregister
parse_mac_sptr_swigregister(parse_mac_sptr)

parse_mac_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
parse_mac = parse_mac.make;

class sync_long_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::sync_long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::sync_long)> self) -> sync_long_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::sync_long)> self, sync_long p) -> sync_long_sptr
        """
        this = _ieee802_11_swig.new_sync_long_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sync_long_sptr self) -> sync_long"""
        return _ieee802_11_swig.sync_long_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_sync_long_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(sync_long_sptr self, unsigned int sync_length, bool log=False, bool debug=False) -> sync_long_sptr"""
        return _ieee802_11_swig.sync_long_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(sync_long_sptr self) -> unsigned int"""
        return _ieee802_11_swig.sync_long_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sync_long_sptr self, int which, int delay)
        declare_sample_delay(sync_long_sptr self, unsigned int delay)
        """
        return _ieee802_11_swig.sync_long_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sync_long_sptr self, int which) -> unsigned int"""
        return _ieee802_11_swig.sync_long_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sync_long_sptr self) -> int"""
        return _ieee802_11_swig.sync_long_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sync_long_sptr self) -> double"""
        return _ieee802_11_swig.sync_long_sptr_relative_rate(self)

    def start(self):
        """start(sync_long_sptr self) -> bool"""
        return _ieee802_11_swig.sync_long_sptr_start(self)

    def stop(self):
        """stop(sync_long_sptr self) -> bool"""
        return _ieee802_11_swig.sync_long_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sync_long_sptr self, unsigned int which_input) -> uint64_t"""
        return _ieee802_11_swig.sync_long_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sync_long_sptr self, unsigned int which_output) -> uint64_t"""
        return _ieee802_11_swig.sync_long_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sync_long_sptr self) -> int"""
        return _ieee802_11_swig.sync_long_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sync_long_sptr self, int m)"""
        return _ieee802_11_swig.sync_long_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sync_long_sptr self)"""
        return _ieee802_11_swig.sync_long_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sync_long_sptr self) -> bool"""
        return _ieee802_11_swig.sync_long_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sync_long_sptr self, int m)"""
        return _ieee802_11_swig.sync_long_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sync_long_sptr self) -> int"""
        return _ieee802_11_swig.sync_long_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sync_long_sptr self, int i) -> long"""
        return _ieee802_11_swig.sync_long_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sync_long_sptr self, long max_output_buffer)
        set_max_output_buffer(sync_long_sptr self, int port, long max_output_buffer)
        """
        return _ieee802_11_swig.sync_long_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sync_long_sptr self, int i) -> long"""
        return _ieee802_11_swig.sync_long_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sync_long_sptr self, long min_output_buffer)
        set_min_output_buffer(sync_long_sptr self, int port, long min_output_buffer)
        """
        return _ieee802_11_swig.sync_long_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sync_long_sptr self) -> float"""
        return _ieee802_11_swig.sync_long_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sync_long_sptr self) -> float"""
        return _ieee802_11_swig.sync_long_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sync_long_sptr self) -> float"""
        return _ieee802_11_swig.sync_long_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sync_long_sptr self) -> float"""
        return _ieee802_11_swig.sync_long_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sync_long_sptr self) -> float"""
        return _ieee802_11_swig.sync_long_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sync_long_sptr self) -> float"""
        return _ieee802_11_swig.sync_long_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sync_long_sptr self, int which) -> float
        pc_input_buffers_full(sync_long_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.sync_long_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sync_long_sptr self, int which) -> float
        pc_input_buffers_full_avg(sync_long_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.sync_long_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sync_long_sptr self, int which) -> float
        pc_input_buffers_full_var(sync_long_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.sync_long_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sync_long_sptr self, int which) -> float
        pc_output_buffers_full(sync_long_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.sync_long_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sync_long_sptr self, int which) -> float
        pc_output_buffers_full_avg(sync_long_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.sync_long_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sync_long_sptr self, int which) -> float
        pc_output_buffers_full_var(sync_long_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.sync_long_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sync_long_sptr self) -> float"""
        return _ieee802_11_swig.sync_long_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sync_long_sptr self) -> float"""
        return _ieee802_11_swig.sync_long_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sync_long_sptr self) -> float"""
        return _ieee802_11_swig.sync_long_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sync_long_sptr self) -> float"""
        return _ieee802_11_swig.sync_long_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(sync_long_sptr self) -> float"""
        return _ieee802_11_swig.sync_long_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sync_long_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ieee802_11_swig.sync_long_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sync_long_sptr self)"""
        return _ieee802_11_swig.sync_long_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sync_long_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.sync_long_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sync_long_sptr self) -> int"""
        return _ieee802_11_swig.sync_long_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sync_long_sptr self) -> int"""
        return _ieee802_11_swig.sync_long_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sync_long_sptr self, int priority) -> int"""
        return _ieee802_11_swig.sync_long_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sync_long_sptr self) -> std::string"""
        return _ieee802_11_swig.sync_long_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sync_long_sptr self) -> std::string"""
        return _ieee802_11_swig.sync_long_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sync_long_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.sync_long_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sync_long_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.sync_long_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sync_long_sptr self) -> long"""
        return _ieee802_11_swig.sync_long_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sync_long_sptr self) -> basic_block_sptr"""
        return _ieee802_11_swig.sync_long_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sync_long_sptr self, int ninputs, int noutputs) -> bool"""
        return _ieee802_11_swig.sync_long_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sync_long_sptr self) -> std::string"""
        return _ieee802_11_swig.sync_long_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sync_long_sptr self, std::string name)"""
        return _ieee802_11_swig.sync_long_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sync_long_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ieee802_11_swig.sync_long_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sync_long_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.sync_long_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sync_long_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.sync_long_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sync_long_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ieee802_11_swig.sync_long_sptr_message_subscribers(self, *args, **kwargs)

sync_long_sptr_swigregister = _ieee802_11_swig.sync_long_sptr_swigregister
sync_long_sptr_swigregister(sync_long_sptr)

sync_long_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sync_long = sync_long.make;

class sync_short_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::sync_short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::sync_short)> self) -> sync_short_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::sync_short)> self, sync_short p) -> sync_short_sptr
        """
        this = _ieee802_11_swig.new_sync_short_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sync_short_sptr self) -> sync_short"""
        return _ieee802_11_swig.sync_short_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_sync_short_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(sync_short_sptr self, double threshold, unsigned int min_plateau, bool log=False, bool debug=False) -> sync_short_sptr"""
        return _ieee802_11_swig.sync_short_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(sync_short_sptr self) -> unsigned int"""
        return _ieee802_11_swig.sync_short_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sync_short_sptr self, int which, int delay)
        declare_sample_delay(sync_short_sptr self, unsigned int delay)
        """
        return _ieee802_11_swig.sync_short_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sync_short_sptr self, int which) -> unsigned int"""
        return _ieee802_11_swig.sync_short_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sync_short_sptr self) -> int"""
        return _ieee802_11_swig.sync_short_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sync_short_sptr self) -> double"""
        return _ieee802_11_swig.sync_short_sptr_relative_rate(self)

    def start(self):
        """start(sync_short_sptr self) -> bool"""
        return _ieee802_11_swig.sync_short_sptr_start(self)

    def stop(self):
        """stop(sync_short_sptr self) -> bool"""
        return _ieee802_11_swig.sync_short_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sync_short_sptr self, unsigned int which_input) -> uint64_t"""
        return _ieee802_11_swig.sync_short_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sync_short_sptr self, unsigned int which_output) -> uint64_t"""
        return _ieee802_11_swig.sync_short_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sync_short_sptr self) -> int"""
        return _ieee802_11_swig.sync_short_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sync_short_sptr self, int m)"""
        return _ieee802_11_swig.sync_short_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sync_short_sptr self)"""
        return _ieee802_11_swig.sync_short_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sync_short_sptr self) -> bool"""
        return _ieee802_11_swig.sync_short_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sync_short_sptr self, int m)"""
        return _ieee802_11_swig.sync_short_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sync_short_sptr self) -> int"""
        return _ieee802_11_swig.sync_short_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sync_short_sptr self, int i) -> long"""
        return _ieee802_11_swig.sync_short_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sync_short_sptr self, long max_output_buffer)
        set_max_output_buffer(sync_short_sptr self, int port, long max_output_buffer)
        """
        return _ieee802_11_swig.sync_short_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sync_short_sptr self, int i) -> long"""
        return _ieee802_11_swig.sync_short_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sync_short_sptr self, long min_output_buffer)
        set_min_output_buffer(sync_short_sptr self, int port, long min_output_buffer)
        """
        return _ieee802_11_swig.sync_short_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sync_short_sptr self) -> float"""
        return _ieee802_11_swig.sync_short_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sync_short_sptr self) -> float"""
        return _ieee802_11_swig.sync_short_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sync_short_sptr self) -> float"""
        return _ieee802_11_swig.sync_short_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sync_short_sptr self) -> float"""
        return _ieee802_11_swig.sync_short_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sync_short_sptr self) -> float"""
        return _ieee802_11_swig.sync_short_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sync_short_sptr self) -> float"""
        return _ieee802_11_swig.sync_short_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sync_short_sptr self, int which) -> float
        pc_input_buffers_full(sync_short_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.sync_short_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sync_short_sptr self, int which) -> float
        pc_input_buffers_full_avg(sync_short_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.sync_short_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sync_short_sptr self, int which) -> float
        pc_input_buffers_full_var(sync_short_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.sync_short_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sync_short_sptr self, int which) -> float
        pc_output_buffers_full(sync_short_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.sync_short_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sync_short_sptr self, int which) -> float
        pc_output_buffers_full_avg(sync_short_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.sync_short_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sync_short_sptr self, int which) -> float
        pc_output_buffers_full_var(sync_short_sptr self) -> pmt_vector_float
        """
        return _ieee802_11_swig.sync_short_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sync_short_sptr self) -> float"""
        return _ieee802_11_swig.sync_short_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sync_short_sptr self) -> float"""
        return _ieee802_11_swig.sync_short_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sync_short_sptr self) -> float"""
        return _ieee802_11_swig.sync_short_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sync_short_sptr self) -> float"""
        return _ieee802_11_swig.sync_short_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(sync_short_sptr self) -> float"""
        return _ieee802_11_swig.sync_short_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sync_short_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ieee802_11_swig.sync_short_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sync_short_sptr self)"""
        return _ieee802_11_swig.sync_short_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sync_short_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.sync_short_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sync_short_sptr self) -> int"""
        return _ieee802_11_swig.sync_short_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sync_short_sptr self) -> int"""
        return _ieee802_11_swig.sync_short_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sync_short_sptr self, int priority) -> int"""
        return _ieee802_11_swig.sync_short_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sync_short_sptr self) -> std::string"""
        return _ieee802_11_swig.sync_short_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sync_short_sptr self) -> std::string"""
        return _ieee802_11_swig.sync_short_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sync_short_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.sync_short_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sync_short_sptr self) -> io_signature_sptr"""
        return _ieee802_11_swig.sync_short_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sync_short_sptr self) -> long"""
        return _ieee802_11_swig.sync_short_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sync_short_sptr self) -> basic_block_sptr"""
        return _ieee802_11_swig.sync_short_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sync_short_sptr self, int ninputs, int noutputs) -> bool"""
        return _ieee802_11_swig.sync_short_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sync_short_sptr self) -> std::string"""
        return _ieee802_11_swig.sync_short_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sync_short_sptr self, std::string name)"""
        return _ieee802_11_swig.sync_short_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sync_short_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ieee802_11_swig.sync_short_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sync_short_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.sync_short_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sync_short_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.sync_short_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sync_short_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ieee802_11_swig.sync_short_sptr_message_subscribers(self, *args, **kwargs)

sync_short_sptr_swigregister = _ieee802_11_swig.sync_short_sptr_swigregister
sync_short_sptr_swigregister(sync_short_sptr)

sync_short_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sync_short = sync_short.make;

class signal_field_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::signal_field)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::signal_field)> self) -> signal_field_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::signal_field)> self, signal_field p) -> signal_field_sptr
        """
        this = _ieee802_11_swig.new_signal_field_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(signal_field_sptr self) -> signal_field"""
        return _ieee802_11_swig.signal_field_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_signal_field_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(signal_field_sptr self) -> signal_field_sptr"""
        return _ieee802_11_swig.signal_field_sptr_make(self)

    def base(self):
        """base(signal_field_sptr self) -> gr::digital::packet_header_default::sptr"""
        return _ieee802_11_swig.signal_field_sptr_base(self)

    def formatter(self):
        """formatter(signal_field_sptr self) -> gr::digital::packet_header_default::sptr"""
        return _ieee802_11_swig.signal_field_sptr_formatter(self)

    def set_header_num(self, *args, **kwargs):
        """set_header_num(signal_field_sptr self, unsigned int header_num)"""
        return _ieee802_11_swig.signal_field_sptr_set_header_num(self, *args, **kwargs)

    def header_len(self):
        """header_len(signal_field_sptr self) -> long"""
        return _ieee802_11_swig.signal_field_sptr_header_len(self)

    def len_tag_key(self):
        """len_tag_key(signal_field_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.signal_field_sptr_len_tag_key(self)

    def header_formatter(self, *args, **kwargs):
        """header_formatter(signal_field_sptr self, long packet_len, unsigned char * out, tags_vector_t tags=std::vector< gr::tag_t >()) -> bool"""
        return _ieee802_11_swig.signal_field_sptr_header_formatter(self, *args, **kwargs)

    def header_parser(self, *args, **kwargs):
        """header_parser(signal_field_sptr self, unsigned char const * header, tags_vector_t tags) -> bool"""
        return _ieee802_11_swig.signal_field_sptr_header_parser(self, *args, **kwargs)

signal_field_sptr_swigregister = _ieee802_11_swig.signal_field_sptr_swigregister
signal_field_sptr_swigregister(signal_field_sptr)

signal_field_sptr.__repr__ = lambda self: "<signal_field>"
signal_field = signal_field.make;

class constellation_bpsk_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::constellation_bpsk)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::constellation_bpsk)> self) -> constellation_bpsk_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::constellation_bpsk)> self, constellation_bpsk p) -> constellation_bpsk_sptr
        """
        this = _ieee802_11_swig.new_constellation_bpsk_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(constellation_bpsk_sptr self) -> constellation_bpsk"""
        return _ieee802_11_swig.constellation_bpsk_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_constellation_bpsk_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(constellation_bpsk_sptr self) -> constellation_bpsk_sptr"""
        return _ieee802_11_swig.constellation_bpsk_sptr_make(self)

    def map_to_points(self, *args, **kwargs):
        """map_to_points(constellation_bpsk_sptr self, unsigned int value, gr_complex * points)"""
        return _ieee802_11_swig.constellation_bpsk_sptr_map_to_points(self, *args, **kwargs)

    def map_to_points_v(self, *args, **kwargs):
        """map_to_points_v(constellation_bpsk_sptr self, unsigned int value) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_bpsk_sptr_map_to_points_v(self, *args, **kwargs)

    def decision_maker(self, *args, **kwargs):
        """decision_maker(constellation_bpsk_sptr self, gr_complex const * sample) -> unsigned int"""
        return _ieee802_11_swig.constellation_bpsk_sptr_decision_maker(self, *args, **kwargs)

    def decision_maker_v(self, *args, **kwargs):
        """decision_maker_v(constellation_bpsk_sptr self, pmt_vector_cfloat sample) -> unsigned int"""
        return _ieee802_11_swig.constellation_bpsk_sptr_decision_maker_v(self, *args, **kwargs)

    def decision_maker_pe(self, *args, **kwargs):
        """decision_maker_pe(constellation_bpsk_sptr self, gr_complex const * sample, float * phase_error) -> unsigned int"""
        return _ieee802_11_swig.constellation_bpsk_sptr_decision_maker_pe(self, *args, **kwargs)

    def calc_metric(self, *args, **kwargs):
        """calc_metric(constellation_bpsk_sptr self, gr_complex const * sample, float * metric, gr::digital::trellis_metric_type_t type)"""
        return _ieee802_11_swig.constellation_bpsk_sptr_calc_metric(self, *args, **kwargs)

    def calc_euclidean_metric(self, *args, **kwargs):
        """calc_euclidean_metric(constellation_bpsk_sptr self, gr_complex const * sample, float * metric)"""
        return _ieee802_11_swig.constellation_bpsk_sptr_calc_euclidean_metric(self, *args, **kwargs)

    def calc_hard_symbol_metric(self, *args, **kwargs):
        """calc_hard_symbol_metric(constellation_bpsk_sptr self, gr_complex const * sample, float * metric)"""
        return _ieee802_11_swig.constellation_bpsk_sptr_calc_hard_symbol_metric(self, *args, **kwargs)

    def points(self):
        """points(constellation_bpsk_sptr self) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_bpsk_sptr_points(self)

    def s_points(self):
        """s_points(constellation_bpsk_sptr self) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_bpsk_sptr_s_points(self)

    def v_points(self):
        """v_points(constellation_bpsk_sptr self) -> gr_vector_vector_complexf"""
        return _ieee802_11_swig.constellation_bpsk_sptr_v_points(self)

    def apply_pre_diff_code(self):
        """apply_pre_diff_code(constellation_bpsk_sptr self) -> bool"""
        return _ieee802_11_swig.constellation_bpsk_sptr_apply_pre_diff_code(self)

    def set_pre_diff_code(self, *args, **kwargs):
        """set_pre_diff_code(constellation_bpsk_sptr self, bool a)"""
        return _ieee802_11_swig.constellation_bpsk_sptr_set_pre_diff_code(self, *args, **kwargs)

    def pre_diff_code(self):
        """pre_diff_code(constellation_bpsk_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.constellation_bpsk_sptr_pre_diff_code(self)

    def rotational_symmetry(self):
        """rotational_symmetry(constellation_bpsk_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_bpsk_sptr_rotational_symmetry(self)

    def dimensionality(self):
        """dimensionality(constellation_bpsk_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_bpsk_sptr_dimensionality(self)

    def bits_per_symbol(self):
        """bits_per_symbol(constellation_bpsk_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_bpsk_sptr_bits_per_symbol(self)

    def arity(self):
        """arity(constellation_bpsk_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_bpsk_sptr_arity(self)

    def base(self):
        """base(constellation_bpsk_sptr self) -> gr::digital::constellation_sptr"""
        return _ieee802_11_swig.constellation_bpsk_sptr_base(self)

    def as_pmt(self):
        """as_pmt(constellation_bpsk_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.constellation_bpsk_sptr_as_pmt(self)

    def gen_soft_dec_lut(self, *args, **kwargs):
        """gen_soft_dec_lut(constellation_bpsk_sptr self, int precision, float npwr=1.0)"""
        return _ieee802_11_swig.constellation_bpsk_sptr_gen_soft_dec_lut(self, *args, **kwargs)

    def calc_soft_dec(self, *args, **kwargs):
        """calc_soft_dec(constellation_bpsk_sptr self, gr_complex sample, float npwr=1.0) -> pmt_vector_float"""
        return _ieee802_11_swig.constellation_bpsk_sptr_calc_soft_dec(self, *args, **kwargs)

    def set_soft_dec_lut(self, *args, **kwargs):
        """
        set_soft_dec_lut(constellation_bpsk_sptr self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const & soft_dec_lut, 
            int precision)
        """
        return _ieee802_11_swig.constellation_bpsk_sptr_set_soft_dec_lut(self, *args, **kwargs)

    def has_soft_dec_lut(self):
        """has_soft_dec_lut(constellation_bpsk_sptr self) -> bool"""
        return _ieee802_11_swig.constellation_bpsk_sptr_has_soft_dec_lut(self)

    def soft_dec_lut(self):
        """soft_dec_lut(constellation_bpsk_sptr self) -> std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > >"""
        return _ieee802_11_swig.constellation_bpsk_sptr_soft_dec_lut(self)

    def soft_decision_maker(self, *args, **kwargs):
        """soft_decision_maker(constellation_bpsk_sptr self, gr_complex sample) -> pmt_vector_float"""
        return _ieee802_11_swig.constellation_bpsk_sptr_soft_decision_maker(self, *args, **kwargs)

constellation_bpsk_sptr_swigregister = _ieee802_11_swig.constellation_bpsk_sptr_swigregister
constellation_bpsk_sptr_swigregister(constellation_bpsk_sptr)

constellation_bpsk_sptr.__repr__ = lambda self: "<constellation BPSK>"
constellation_bpsk = constellation_bpsk.make;

class constellation_qpsk_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::constellation_qpsk)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::constellation_qpsk)> self) -> constellation_qpsk_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::constellation_qpsk)> self, constellation_qpsk p) -> constellation_qpsk_sptr
        """
        this = _ieee802_11_swig.new_constellation_qpsk_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(constellation_qpsk_sptr self) -> constellation_qpsk"""
        return _ieee802_11_swig.constellation_qpsk_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_constellation_qpsk_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(constellation_qpsk_sptr self) -> constellation_qpsk_sptr"""
        return _ieee802_11_swig.constellation_qpsk_sptr_make(self)

    def map_to_points(self, *args, **kwargs):
        """map_to_points(constellation_qpsk_sptr self, unsigned int value, gr_complex * points)"""
        return _ieee802_11_swig.constellation_qpsk_sptr_map_to_points(self, *args, **kwargs)

    def map_to_points_v(self, *args, **kwargs):
        """map_to_points_v(constellation_qpsk_sptr self, unsigned int value) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_qpsk_sptr_map_to_points_v(self, *args, **kwargs)

    def decision_maker(self, *args, **kwargs):
        """decision_maker(constellation_qpsk_sptr self, gr_complex const * sample) -> unsigned int"""
        return _ieee802_11_swig.constellation_qpsk_sptr_decision_maker(self, *args, **kwargs)

    def decision_maker_v(self, *args, **kwargs):
        """decision_maker_v(constellation_qpsk_sptr self, pmt_vector_cfloat sample) -> unsigned int"""
        return _ieee802_11_swig.constellation_qpsk_sptr_decision_maker_v(self, *args, **kwargs)

    def decision_maker_pe(self, *args, **kwargs):
        """decision_maker_pe(constellation_qpsk_sptr self, gr_complex const * sample, float * phase_error) -> unsigned int"""
        return _ieee802_11_swig.constellation_qpsk_sptr_decision_maker_pe(self, *args, **kwargs)

    def calc_metric(self, *args, **kwargs):
        """calc_metric(constellation_qpsk_sptr self, gr_complex const * sample, float * metric, gr::digital::trellis_metric_type_t type)"""
        return _ieee802_11_swig.constellation_qpsk_sptr_calc_metric(self, *args, **kwargs)

    def calc_euclidean_metric(self, *args, **kwargs):
        """calc_euclidean_metric(constellation_qpsk_sptr self, gr_complex const * sample, float * metric)"""
        return _ieee802_11_swig.constellation_qpsk_sptr_calc_euclidean_metric(self, *args, **kwargs)

    def calc_hard_symbol_metric(self, *args, **kwargs):
        """calc_hard_symbol_metric(constellation_qpsk_sptr self, gr_complex const * sample, float * metric)"""
        return _ieee802_11_swig.constellation_qpsk_sptr_calc_hard_symbol_metric(self, *args, **kwargs)

    def points(self):
        """points(constellation_qpsk_sptr self) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_qpsk_sptr_points(self)

    def s_points(self):
        """s_points(constellation_qpsk_sptr self) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_qpsk_sptr_s_points(self)

    def v_points(self):
        """v_points(constellation_qpsk_sptr self) -> gr_vector_vector_complexf"""
        return _ieee802_11_swig.constellation_qpsk_sptr_v_points(self)

    def apply_pre_diff_code(self):
        """apply_pre_diff_code(constellation_qpsk_sptr self) -> bool"""
        return _ieee802_11_swig.constellation_qpsk_sptr_apply_pre_diff_code(self)

    def set_pre_diff_code(self, *args, **kwargs):
        """set_pre_diff_code(constellation_qpsk_sptr self, bool a)"""
        return _ieee802_11_swig.constellation_qpsk_sptr_set_pre_diff_code(self, *args, **kwargs)

    def pre_diff_code(self):
        """pre_diff_code(constellation_qpsk_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.constellation_qpsk_sptr_pre_diff_code(self)

    def rotational_symmetry(self):
        """rotational_symmetry(constellation_qpsk_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_qpsk_sptr_rotational_symmetry(self)

    def dimensionality(self):
        """dimensionality(constellation_qpsk_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_qpsk_sptr_dimensionality(self)

    def bits_per_symbol(self):
        """bits_per_symbol(constellation_qpsk_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_qpsk_sptr_bits_per_symbol(self)

    def arity(self):
        """arity(constellation_qpsk_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_qpsk_sptr_arity(self)

    def base(self):
        """base(constellation_qpsk_sptr self) -> gr::digital::constellation_sptr"""
        return _ieee802_11_swig.constellation_qpsk_sptr_base(self)

    def as_pmt(self):
        """as_pmt(constellation_qpsk_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.constellation_qpsk_sptr_as_pmt(self)

    def gen_soft_dec_lut(self, *args, **kwargs):
        """gen_soft_dec_lut(constellation_qpsk_sptr self, int precision, float npwr=1.0)"""
        return _ieee802_11_swig.constellation_qpsk_sptr_gen_soft_dec_lut(self, *args, **kwargs)

    def calc_soft_dec(self, *args, **kwargs):
        """calc_soft_dec(constellation_qpsk_sptr self, gr_complex sample, float npwr=1.0) -> pmt_vector_float"""
        return _ieee802_11_swig.constellation_qpsk_sptr_calc_soft_dec(self, *args, **kwargs)

    def set_soft_dec_lut(self, *args, **kwargs):
        """
        set_soft_dec_lut(constellation_qpsk_sptr self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const & soft_dec_lut, 
            int precision)
        """
        return _ieee802_11_swig.constellation_qpsk_sptr_set_soft_dec_lut(self, *args, **kwargs)

    def has_soft_dec_lut(self):
        """has_soft_dec_lut(constellation_qpsk_sptr self) -> bool"""
        return _ieee802_11_swig.constellation_qpsk_sptr_has_soft_dec_lut(self)

    def soft_dec_lut(self):
        """soft_dec_lut(constellation_qpsk_sptr self) -> std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > >"""
        return _ieee802_11_swig.constellation_qpsk_sptr_soft_dec_lut(self)

    def soft_decision_maker(self, *args, **kwargs):
        """soft_decision_maker(constellation_qpsk_sptr self, gr_complex sample) -> pmt_vector_float"""
        return _ieee802_11_swig.constellation_qpsk_sptr_soft_decision_maker(self, *args, **kwargs)

constellation_qpsk_sptr_swigregister = _ieee802_11_swig.constellation_qpsk_sptr_swigregister
constellation_qpsk_sptr_swigregister(constellation_qpsk_sptr)

constellation_qpsk_sptr.__repr__ = lambda self: "<constellation QPSK>"
constellation_qpsk = constellation_qpsk.make;

class constellation_16qam_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::constellation_16qam)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::constellation_16qam)> self) -> constellation_16qam_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::constellation_16qam)> self, constellation_16qam p) -> constellation_16qam_sptr
        """
        this = _ieee802_11_swig.new_constellation_16qam_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(constellation_16qam_sptr self) -> constellation_16qam"""
        return _ieee802_11_swig.constellation_16qam_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_constellation_16qam_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(constellation_16qam_sptr self) -> constellation_16qam_sptr"""
        return _ieee802_11_swig.constellation_16qam_sptr_make(self)

    def map_to_points(self, *args, **kwargs):
        """map_to_points(constellation_16qam_sptr self, unsigned int value, gr_complex * points)"""
        return _ieee802_11_swig.constellation_16qam_sptr_map_to_points(self, *args, **kwargs)

    def map_to_points_v(self, *args, **kwargs):
        """map_to_points_v(constellation_16qam_sptr self, unsigned int value) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_16qam_sptr_map_to_points_v(self, *args, **kwargs)

    def decision_maker(self, *args, **kwargs):
        """decision_maker(constellation_16qam_sptr self, gr_complex const * sample) -> unsigned int"""
        return _ieee802_11_swig.constellation_16qam_sptr_decision_maker(self, *args, **kwargs)

    def decision_maker_v(self, *args, **kwargs):
        """decision_maker_v(constellation_16qam_sptr self, pmt_vector_cfloat sample) -> unsigned int"""
        return _ieee802_11_swig.constellation_16qam_sptr_decision_maker_v(self, *args, **kwargs)

    def decision_maker_pe(self, *args, **kwargs):
        """decision_maker_pe(constellation_16qam_sptr self, gr_complex const * sample, float * phase_error) -> unsigned int"""
        return _ieee802_11_swig.constellation_16qam_sptr_decision_maker_pe(self, *args, **kwargs)

    def calc_metric(self, *args, **kwargs):
        """calc_metric(constellation_16qam_sptr self, gr_complex const * sample, float * metric, gr::digital::trellis_metric_type_t type)"""
        return _ieee802_11_swig.constellation_16qam_sptr_calc_metric(self, *args, **kwargs)

    def calc_euclidean_metric(self, *args, **kwargs):
        """calc_euclidean_metric(constellation_16qam_sptr self, gr_complex const * sample, float * metric)"""
        return _ieee802_11_swig.constellation_16qam_sptr_calc_euclidean_metric(self, *args, **kwargs)

    def calc_hard_symbol_metric(self, *args, **kwargs):
        """calc_hard_symbol_metric(constellation_16qam_sptr self, gr_complex const * sample, float * metric)"""
        return _ieee802_11_swig.constellation_16qam_sptr_calc_hard_symbol_metric(self, *args, **kwargs)

    def points(self):
        """points(constellation_16qam_sptr self) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_16qam_sptr_points(self)

    def s_points(self):
        """s_points(constellation_16qam_sptr self) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_16qam_sptr_s_points(self)

    def v_points(self):
        """v_points(constellation_16qam_sptr self) -> gr_vector_vector_complexf"""
        return _ieee802_11_swig.constellation_16qam_sptr_v_points(self)

    def apply_pre_diff_code(self):
        """apply_pre_diff_code(constellation_16qam_sptr self) -> bool"""
        return _ieee802_11_swig.constellation_16qam_sptr_apply_pre_diff_code(self)

    def set_pre_diff_code(self, *args, **kwargs):
        """set_pre_diff_code(constellation_16qam_sptr self, bool a)"""
        return _ieee802_11_swig.constellation_16qam_sptr_set_pre_diff_code(self, *args, **kwargs)

    def pre_diff_code(self):
        """pre_diff_code(constellation_16qam_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.constellation_16qam_sptr_pre_diff_code(self)

    def rotational_symmetry(self):
        """rotational_symmetry(constellation_16qam_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_16qam_sptr_rotational_symmetry(self)

    def dimensionality(self):
        """dimensionality(constellation_16qam_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_16qam_sptr_dimensionality(self)

    def bits_per_symbol(self):
        """bits_per_symbol(constellation_16qam_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_16qam_sptr_bits_per_symbol(self)

    def arity(self):
        """arity(constellation_16qam_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_16qam_sptr_arity(self)

    def base(self):
        """base(constellation_16qam_sptr self) -> gr::digital::constellation_sptr"""
        return _ieee802_11_swig.constellation_16qam_sptr_base(self)

    def as_pmt(self):
        """as_pmt(constellation_16qam_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.constellation_16qam_sptr_as_pmt(self)

    def gen_soft_dec_lut(self, *args, **kwargs):
        """gen_soft_dec_lut(constellation_16qam_sptr self, int precision, float npwr=1.0)"""
        return _ieee802_11_swig.constellation_16qam_sptr_gen_soft_dec_lut(self, *args, **kwargs)

    def calc_soft_dec(self, *args, **kwargs):
        """calc_soft_dec(constellation_16qam_sptr self, gr_complex sample, float npwr=1.0) -> pmt_vector_float"""
        return _ieee802_11_swig.constellation_16qam_sptr_calc_soft_dec(self, *args, **kwargs)

    def set_soft_dec_lut(self, *args, **kwargs):
        """
        set_soft_dec_lut(constellation_16qam_sptr self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const & soft_dec_lut, 
            int precision)
        """
        return _ieee802_11_swig.constellation_16qam_sptr_set_soft_dec_lut(self, *args, **kwargs)

    def has_soft_dec_lut(self):
        """has_soft_dec_lut(constellation_16qam_sptr self) -> bool"""
        return _ieee802_11_swig.constellation_16qam_sptr_has_soft_dec_lut(self)

    def soft_dec_lut(self):
        """soft_dec_lut(constellation_16qam_sptr self) -> std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > >"""
        return _ieee802_11_swig.constellation_16qam_sptr_soft_dec_lut(self)

    def soft_decision_maker(self, *args, **kwargs):
        """soft_decision_maker(constellation_16qam_sptr self, gr_complex sample) -> pmt_vector_float"""
        return _ieee802_11_swig.constellation_16qam_sptr_soft_decision_maker(self, *args, **kwargs)

constellation_16qam_sptr_swigregister = _ieee802_11_swig.constellation_16qam_sptr_swigregister
constellation_16qam_sptr_swigregister(constellation_16qam_sptr)

constellation_16qam_sptr.__repr__ = lambda self: "<constellation 16QAM>"
constellation_16qam = constellation_16qam.make;

class constellation_64qam_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ieee802_11::constellation_64qam)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ieee802_11::constellation_64qam)> self) -> constellation_64qam_sptr
        __init__(boost::shared_ptr<(gr::ieee802_11::constellation_64qam)> self, constellation_64qam p) -> constellation_64qam_sptr
        """
        this = _ieee802_11_swig.new_constellation_64qam_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(constellation_64qam_sptr self) -> constellation_64qam"""
        return _ieee802_11_swig.constellation_64qam_sptr___deref__(self)

    __swig_destroy__ = _ieee802_11_swig.delete_constellation_64qam_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(constellation_64qam_sptr self) -> constellation_64qam_sptr"""
        return _ieee802_11_swig.constellation_64qam_sptr_make(self)

    def map_to_points(self, *args, **kwargs):
        """map_to_points(constellation_64qam_sptr self, unsigned int value, gr_complex * points)"""
        return _ieee802_11_swig.constellation_64qam_sptr_map_to_points(self, *args, **kwargs)

    def map_to_points_v(self, *args, **kwargs):
        """map_to_points_v(constellation_64qam_sptr self, unsigned int value) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_64qam_sptr_map_to_points_v(self, *args, **kwargs)

    def decision_maker(self, *args, **kwargs):
        """decision_maker(constellation_64qam_sptr self, gr_complex const * sample) -> unsigned int"""
        return _ieee802_11_swig.constellation_64qam_sptr_decision_maker(self, *args, **kwargs)

    def decision_maker_v(self, *args, **kwargs):
        """decision_maker_v(constellation_64qam_sptr self, pmt_vector_cfloat sample) -> unsigned int"""
        return _ieee802_11_swig.constellation_64qam_sptr_decision_maker_v(self, *args, **kwargs)

    def decision_maker_pe(self, *args, **kwargs):
        """decision_maker_pe(constellation_64qam_sptr self, gr_complex const * sample, float * phase_error) -> unsigned int"""
        return _ieee802_11_swig.constellation_64qam_sptr_decision_maker_pe(self, *args, **kwargs)

    def calc_metric(self, *args, **kwargs):
        """calc_metric(constellation_64qam_sptr self, gr_complex const * sample, float * metric, gr::digital::trellis_metric_type_t type)"""
        return _ieee802_11_swig.constellation_64qam_sptr_calc_metric(self, *args, **kwargs)

    def calc_euclidean_metric(self, *args, **kwargs):
        """calc_euclidean_metric(constellation_64qam_sptr self, gr_complex const * sample, float * metric)"""
        return _ieee802_11_swig.constellation_64qam_sptr_calc_euclidean_metric(self, *args, **kwargs)

    def calc_hard_symbol_metric(self, *args, **kwargs):
        """calc_hard_symbol_metric(constellation_64qam_sptr self, gr_complex const * sample, float * metric)"""
        return _ieee802_11_swig.constellation_64qam_sptr_calc_hard_symbol_metric(self, *args, **kwargs)

    def points(self):
        """points(constellation_64qam_sptr self) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_64qam_sptr_points(self)

    def s_points(self):
        """s_points(constellation_64qam_sptr self) -> pmt_vector_cfloat"""
        return _ieee802_11_swig.constellation_64qam_sptr_s_points(self)

    def v_points(self):
        """v_points(constellation_64qam_sptr self) -> gr_vector_vector_complexf"""
        return _ieee802_11_swig.constellation_64qam_sptr_v_points(self)

    def apply_pre_diff_code(self):
        """apply_pre_diff_code(constellation_64qam_sptr self) -> bool"""
        return _ieee802_11_swig.constellation_64qam_sptr_apply_pre_diff_code(self)

    def set_pre_diff_code(self, *args, **kwargs):
        """set_pre_diff_code(constellation_64qam_sptr self, bool a)"""
        return _ieee802_11_swig.constellation_64qam_sptr_set_pre_diff_code(self, *args, **kwargs)

    def pre_diff_code(self):
        """pre_diff_code(constellation_64qam_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ieee802_11_swig.constellation_64qam_sptr_pre_diff_code(self)

    def rotational_symmetry(self):
        """rotational_symmetry(constellation_64qam_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_64qam_sptr_rotational_symmetry(self)

    def dimensionality(self):
        """dimensionality(constellation_64qam_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_64qam_sptr_dimensionality(self)

    def bits_per_symbol(self):
        """bits_per_symbol(constellation_64qam_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_64qam_sptr_bits_per_symbol(self)

    def arity(self):
        """arity(constellation_64qam_sptr self) -> unsigned int"""
        return _ieee802_11_swig.constellation_64qam_sptr_arity(self)

    def base(self):
        """base(constellation_64qam_sptr self) -> gr::digital::constellation_sptr"""
        return _ieee802_11_swig.constellation_64qam_sptr_base(self)

    def as_pmt(self):
        """as_pmt(constellation_64qam_sptr self) -> swig_int_ptr"""
        return _ieee802_11_swig.constellation_64qam_sptr_as_pmt(self)

    def gen_soft_dec_lut(self, *args, **kwargs):
        """gen_soft_dec_lut(constellation_64qam_sptr self, int precision, float npwr=1.0)"""
        return _ieee802_11_swig.constellation_64qam_sptr_gen_soft_dec_lut(self, *args, **kwargs)

    def calc_soft_dec(self, *args, **kwargs):
        """calc_soft_dec(constellation_64qam_sptr self, gr_complex sample, float npwr=1.0) -> pmt_vector_float"""
        return _ieee802_11_swig.constellation_64qam_sptr_calc_soft_dec(self, *args, **kwargs)

    def set_soft_dec_lut(self, *args, **kwargs):
        """
        set_soft_dec_lut(constellation_64qam_sptr self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const & soft_dec_lut, 
            int precision)
        """
        return _ieee802_11_swig.constellation_64qam_sptr_set_soft_dec_lut(self, *args, **kwargs)

    def has_soft_dec_lut(self):
        """has_soft_dec_lut(constellation_64qam_sptr self) -> bool"""
        return _ieee802_11_swig.constellation_64qam_sptr_has_soft_dec_lut(self)

    def soft_dec_lut(self):
        """soft_dec_lut(constellation_64qam_sptr self) -> std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > >"""
        return _ieee802_11_swig.constellation_64qam_sptr_soft_dec_lut(self)

    def soft_decision_maker(self, *args, **kwargs):
        """soft_decision_maker(constellation_64qam_sptr self, gr_complex sample) -> pmt_vector_float"""
        return _ieee802_11_swig.constellation_64qam_sptr_soft_decision_maker(self, *args, **kwargs)

constellation_64qam_sptr_swigregister = _ieee802_11_swig.constellation_64qam_sptr_swigregister
constellation_64qam_sptr_swigregister(constellation_64qam_sptr)

constellation_64qam_sptr.__repr__ = lambda self: "<constellation 64QAM>"
constellation_64qam = constellation_64qam.make;



